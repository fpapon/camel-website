<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Components on Apache Camel: Integration that you want</title>
    <link>https://camel.apache.org/components/</link>
    <description>Recent content in Components on Apache Camel: Integration that you want</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://camel.apache.org/components/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ahc-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ahc-component/</guid>
      <description>AHC Component Available as of Camel version 2.8
 The ahc: component provides HTTP based endpoints for consuming external HTTP resources (as a client to call external servers using HTTP).
The component uses the Async Http Client library.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ahc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format ahc:http://hostname[:port][/resourceUri][?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ahc-ws-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ahc-ws-component/</guid>
      <description>AHC Websocket Component Available as of Camel version 2.14
 The ahc-ws component provides Websocket based endpoints for a client communicating with external servers over Websocket (as a client opening a websocket connection to an external server).
The component uses the AHC component that in turn uses the https://github.com/AsyncHttpClient/async-http-client[Async Http Client] library.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/amqp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/amqp-component/</guid>
      <description>AMQP Component Available as of Camel version 1.2
 The amqp: component supports the AMQP 1.0 protocol using the JMS Client API of the Qpid project. In case you want to use AMQP 0.9 (in particular RabbitMQ) you might also be interested in the Camel RabbitMQ component. Please keep in mind that prior to the Camel 2.17.0 AMQP component supported AMQP 0.9 and above, however since Camel 2.17.0 it supports only AMQP 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/apns-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/apns-component/</guid>
      <description>APNS Component Available as of Camel version 2.8
 The apns component is used for sending notifications to iOS devices. The apns components use javapns library.
The component supports sending notifications to Apple Push Notification Servers (APNS) and consuming feedback from the servers.
 The consumer is configured with 3600 seconds for polling by default because it is a best practice to consume feedback stream from Apple Push Notification Servers only from time to time.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/asterisk-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/asterisk-component/</guid>
      <description>Asterisk Component Available as of Camel version 2.18
 The asterisk: component allows you to work easily with an Asterisk PBX Server http://www.asterisk.org/ using asterisk-java
 This component help to interface with Asterisk Manager Interface
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-asterisk&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format asterisk:name[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atmos-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atmos-component/</guid>
      <description>Atmos Component Available as of Camel version 2.15
 Camel-Atmos is an Apache Camel component that allows you to work with ViPR object data services using the Atmos Client.
 from(&#34;atmos:foo/get?remotePath=/path&#34;).to(&#34;mock:test&#34;);   Options The Atmos component has no options.
 The Atmos endpoint is configured using URI syntax:
 atmos:name/operation   with the following path and query parameters:
 Path Parameters (2 parameters):     Name Description Default Type     name</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atmosphere-websocket-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atmosphere-websocket-component/</guid>
      <description>Atmosphere Websocket Component Available as of Camel version 2.14
 The atmosphere-websocket: component provides Websocket based endpoints for a servlet communicating with external clients over Websocket (as a servlet accepting websocket connections from external clients).
The component uses the SERVLET component and uses the https://github.com/Atmosphere/atmosphere[Atmosphere] library to support the Websocket transport in various Servlet containers (e..g., Jetty, Tomcat, &amp;#8230;&amp;#8203;).
 Unlike the Websocket component that starts the embedded Jetty server, this component uses the servlet provider of the container.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atom-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atom-component/</guid>
      <description>Atom Component Available as of Camel version 1.2
 The atom: component is used for polling Atom feeds.
 Camel will poll the feed every 60 seconds by default.
Note: The component currently only supports polling (consuming) feeds.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-atom&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format atom://atomUri[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atomix-map-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atomix-map-component/</guid>
      <description>Atomix Map Component Available as of Camel version 2.20
 The camel atomix-map component allows you to work with Atomix&amp;#8217;s Distributed Map collection.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-atomix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format atomix-map:mapName    Options The Atomix Map component supports 5 options which are listed below.
     Name Description Default Type     configuration (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atomix-messaging-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atomix-messaging-component/</guid>
      <description>Atomix Messaging Component Available as of Camel version 2.20
 The camel atomix-messaging component allows you to work with Atomix&amp;#8217;s Group Messaging.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-atomix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format atomix-messaging:group   The Atomix Messaging component supports 5 options which are listed below.
     Name Description Default Type     configuration (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atomix-multimap-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atomix-multimap-component/</guid>
      <description>Atomix MultiMap Component Available as of Camel version 2.20
 The camel atomix-multimap component allows you to work with Atomix&amp;#8217;s Distributed MultiMap collection.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-atomix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format atomix-multimap:multiMapName   The Atomix MultiMap component supports 5 options which are listed below.
     Name Description Default Type     configuration (consumer)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atomix-queue-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atomix-queue-component/</guid>
      <description>Atomix Queue Component Available as of Camel version 2.20
 The camel atomix-queue component allows you to work with Atomix&amp;#8217;s Distributed Queue collection.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-atomix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format atomix-queue:queueName   The Atomix Queue component supports 5 options which are listed below.
     Name Description Default Type     configuration (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atomix-set-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atomix-set-component/</guid>
      <description>Atomix Set Component Available as of Camel version 2.20
 The camel atomix-set component allows you to work with Atomix&amp;#8217;s Distributed Set collection.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-atomix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format atomix-set:setName   The Atomix Set component supports 5 options which are listed below.
     Name Description Default Type     configuration (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/atomix-value-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/atomix-value-component/</guid>
      <description>Atomix Value Component Available as of Camel version 2.20
 The camel atomix-value component allows you to work with Atomix&amp;#8217;s Distributed Value.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-atomix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format atomix-value:valueName   The Atomix Value component supports 5 options which are listed below.
     Name Description Default Type     configuration (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/avro-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/avro-component/</guid>
      <description>Avro Component Available as of Camel version 2.10
 This component provides a dataformat for avro, which allows serialization and deserialization of messages using Apache Avro&amp;#8217;s binary dataformat. Moreover, it provides support for Apache Avro&amp;#8217;s rpc, by providing producers and consumers endpoint for using avro over netty or http.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-avro&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/avro-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/avro-dataformat/</guid>
      <description>Avro DataFormat Available as of Camel version 2.14
 This component provides a dataformat for avro, which allows serialization and deserialization of messages using Apache Avro&amp;#8217;s binary dataformat. Moreover, it provides support for Apache Avro&amp;#8217;s rpc, by providing producers and consumers endpoint for using avro over netty or http.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-avro&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-cw-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-cw-component/</guid>
      <description>AWS CloudWatch Component Available as of Camel version 2.11
 The CW component allows messages to be sent to an Amazon CloudWatch metrics. The implementation of the Amazon API is provided by the http://aws.amazon.com/sdkforjava/[AWS SDK].
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon CloudWatch. More information are available at Amazon CloudWatch.
 URI Format aws-cw://namespace[?options]   The metrics will be created if they don&amp;#8217;t already exists.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-ddb-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-ddb-component/</guid>
      <description>AWS DynamoDB Component Available as of Camel version 2.10
 The DynamoDB component supports storing and retrieving data from/to Amazon&amp;#8217;s DynamoDB service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon DynamoDB. More information are available at Amazon DynamoDB.
 URI Format aws-ddb://domainName[?options]   You can append query options to the URI in the following format, ?options=value&amp;amp;option2=value&amp;amp;&amp;#8230;&amp;#8203;
  URI Options The AWS DynamoDB component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-ddbstream-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-ddbstream-component/</guid>
      <description>AWS DynamoDB Streams Component Available as of Camel version 2.17
 The DynamoDB Stream component supports receiving messages from Amazon DynamoDB Stream service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon DynamoDB Streams. More information are available at http://aws.amazon.com/dynamodb/[AWS DynamoDB]
 URI Format aws-ddbstream://table-name[?options]   The stream needs to be created prior to it being used.
You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-ec2-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-ec2-component/</guid>
      <description>AWS EC2 Component Available as of Camel version 2.16
 The EC2 component supports create, run, start, stop and terminate AWS EC2 instances.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon EC2. More information are available at Amazon EC2.
 URI Format aws-ec2://label[?options]   You can append query options to the URI in the following format, ?options=value&amp;amp;option2=value&amp;amp;&amp;#8230;&amp;#8203;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-kinesis-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-kinesis-component/</guid>
      <description>AWS Kinesis Component Available as of Camel version 2.17
 The Kinesis component supports receiving messages from and sending messages to Amazon Kinesis service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon Kinesis. More information are available at http://aws.amazon.com/kinesis/[AWS Kinesis]
 URI Format aws-kinesis://stream-name[?options]   The stream needs to be created prior to it being used.
You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-kinesis-firehose-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-kinesis-firehose-component/</guid>
      <description>AWS Kinesis Firehose Component Available as of Camel version 2.19
 The Kinesis Firehose component supports sending messages to Amazon Kinesis Firehose service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon Kinesis Firehose. More information are available at https://aws.amazon.com/kinesis/firehose/[AWS Kinesis Firehose]
 URI Format aws-kinesis-firehose://delivery-stream-name[?options]   The stream needs to be created prior to it being used.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-s3-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-s3-component/</guid>
      <description>AWS S3 Storage Service Component Available as of Camel version 2.8
 The S3 component supports storing and retrieving objetcs from/to Amazon&amp;#8217;s S3 service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon S3. More information are available at Amazon S3.
 URI Format aws-s3://bucketNameOrArn[?options]   The bucket will be created if it don&amp;#8217;t already exists.
You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-sdb-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-sdb-component/</guid>
      <description>AWS SimpleDB Component Available as of Camel version 2.9
 The sdb component supports storing and retrieving data from/to Amazon&amp;#8217;s SDB service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon SDB. More information are available at Amazon SDB.
 URI Format aws-sdb://domainName[?options]   You can append query options to the URI in the following format, ?options=value&amp;amp;option2=value&amp;amp;&amp;#8230;&amp;#8203;
  URI Options The AWS SimpleDB component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-ses-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-ses-component/</guid>
      <description>AWS Simple Email Service Component Available as of Camel version 2.9
 The ses component supports sending emails with Amazon&amp;#8217;s SES service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon SES. More information are available at Amazon SES.
 URI Format aws-ses://from[?options]   You can append query options to the URI in the following format, ?options=value&amp;amp;option2=value&amp;amp;&amp;#8230;&amp;#8203;
  URI Options The AWS Simple Email Service component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-sns-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-sns-component/</guid>
      <description>AWS Simple Notification System Component Available as of Camel version 2.8
 The SNS component allows messages to be sent to an Amazon Simple Notification Topic. The implementation of the Amazon API is provided by the http://aws.amazon.com/sdkforjava/[AWS SDK].
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon SNS. More information are available at Amazon SNS.
 URI Format aws-sns://topicNameOrArn[?options]   The topic will be created if they don&amp;#8217;t already exists.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-sqs-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-sqs-component/</guid>
      <description>AWS Simple Queue Service Component Available as of Camel version 2.6
 The sqs component supports sending and receiving messages to Amazon&amp;#8217;s SQS service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon SQS. More information are available at Amazon SQS.
 URI Format aws-sqs://queueNameOrArn[?options]   The queue will be created if they don&amp;#8217;t already exists.
You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws-swf-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws-swf-component/</guid>
      <description>AWS Simple Workflow Component Available as of Camel version 2.13
 The Simple Workflow component supports managing workflows from Amazon&amp;#8217;s Simple Workflow service.
 Prerequisites
 You must have a valid Amazon Web Services developer account, and be signed up to use Amazon Simple Workflow. More information are available at Amazon Simple Workflow.
 URI Format aws-swf://&amp;lt;workflow|activity&amp;gt;[?options]   You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/aws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/aws/</guid>
      <description>Camel Components for Amazon Web Services The Camel Components for Amazon Web Services provide connectivity to AWS services from Camel.
     AWS Service Camel Component Camel Version Component Description     Simple Queue Service (SQS)
 AWS-SQS
 2.6.0
 Supports sending and receiving messages using SQS
   Simple Notification Service (SNS)
 AWS-SNS
 2.8.0
 Supports sending messages using SNS</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/azure-blob-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/azure-blob-component/</guid>
      <description>Azure Storage Blob Service Component Available as of Camel version 2.19
 The Azure Blob component supports storing and retrieving the blobs to/from Azure Storage Blob service.
 Prerequisites
 You must have a valid Windows Azure Storage account. More information is available at Azure Documentation Portal.
 URI Format azure-blob://accountName/containerName[/blobName][?options]   In most cases a blobName is required and the blob will be created if it does not already exist.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/azure-queue-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/azure-queue-component/</guid>
      <description>Azure Storage Queue Service Component Available as of Camel version 2.19
 The Azure Queue component supports storing and retrieving the messages to/from Azure Storage Queue service.
 Prerequisites
 You must have a valid Windows Azure Storage account. More information is available at Azure Documentation Portal.
 URI Format azure-queue://accountName/queueName[?options]   The queue will be created if it does not already exist.
You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/azure/</guid>
      <description>Camel Components for Windows Azure Services The Camel Components for Windows Azure Services provide connectivity to Azure services from Camel.
     Azure Service Camel Component Camel Version Component Description     Storage Blob Service
 Azure-Blob
 2.9.0
 Supports storing and retrieving of blobs
   Storage Queue Service
 Azure-Queue
 2.9.0
 Supports storing and retrieving of messages in the queues</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/bam-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/bam-example/</guid>
      <description>Business Activity Monitor (BAM) Example The BAM (Business Activity Monitor) example shows how to monitor your transaction flows using Camel.
 In this example we will use Camel to monitor a business process consisting of
   purchase orders
  invoices
   Then we will check to see that for every purchase order created by system A, that system B will generate an invoice within the specified amount of time (2 seconds in this example).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/bam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/bam/</guid>
      <description>Business Activity Monitoring The Camel BAM module provides a Business Activity Monitoring (BAM) framework for testing business processes across multiple message exchanges on different Endpoint instances.
 Consider, for example, a simple system in which you submit Purchase Orders into system A and then receive Invoices from system B. You might want to test that, for a given Purchase Order, you receive a matching Invoice from system B within a specific time period.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/barcode-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/barcode-dataformat/</guid>
      <description>Barcode DataFormat Available as of Camel version 2.14
 The barcode data format is based on the zxing library. The goal of this component is to create a barcode image from a String (marshal) and a String from a barcode image (unmarshal). You&amp;#8217;re free to use all features that zxing offers.
 Dependencies To use the barcode data format in your camel routes you need to add the a dependency on camel-barcode which implements this data format.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/base64-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/base64-dataformat/</guid>
      <description>Base64 DataFormat Available as of Camel version 2.11
  The Base64 link:data-format.html[Data Format] is a data format for http://en.wikipedia.org/wiki/Base64[base64 encoding and decoding].   Options The Base64 dataformat supports 4 options which are listed below.
     Name Default Java Type Description     lineLength
 76
 Integer
 To specific a maximum line length for the encoded data. By default 76 is used.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/bean-validator-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/bean-validator-component/</guid>
      <description>Bean Validator Component Available as of Camel version 2.3
 The Validator component performs bean validation of the message body using the Java Bean Validation API (JSR 303). Camel uses the reference implementation, which is Hibernate Validator.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-bean-validator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.y.z&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format bean-validator:label[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/beanio-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/beanio-dataformat/</guid>
      <description>BeanIO DataFormat Available as of Camel version 2.10
 The BeanIO Data Format uses BeanIO to handle flat payloads (such as XML, CSV, delimited, or fixed length formats).
 BeanIO is configured using a mappings XML file where you define the mapping from the flat format to Objects (POJOs). This mapping file is mandatory to use.
 Options The BeanIO dataformat supports 8 options which are listed below.
     Name Default Java Type Description     mapping</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/beanstalk-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/beanstalk-component/</guid>
      <description>Beanstalk Component Available as of Camel version 2.15
 camel-beanstalk project provides a Camel component for job retrieval and post-processing of Beanstalk jobs.
 You can find the detailed explanation of Beanstalk job lifecycle at http://github.com/kr/beanstalkd/blob/v1.3/doc/protocol.txt[Beanstalk protocol].
 Dependencies Maven users need to add the following dependency to their pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-beanstalk&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel (2.15.0 or higher).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/bindy-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/bindy-dataformat/</guid>
      <description>Bindy DataFormat Available as of Camel version 2.0
 The goal of this component is to allow the parsing/binding of non-structured data (or to be more precise non-XML data)
to/from Java Beans that have binding mappings defined with annotations. Using Bindy, you can bind data from sources such as :
   CSV records,
  Fixed-length records,
  FIX messages,
  or almost any other non-structured data</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/blueprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/blueprint/</guid>
      <description>Using OSGi blueprint with Camel A custom XML namespace for Blueprint has been created to let you leverage the nice XML dialect. Given Blueprint custom namespaces are not standardized yet, this namespace can only be used on the Apache Aries Blueprint implementation, which is the one used by Apache Karaf.
 Overview The XML schema is mostly the same as the one for Spring, so all the xml snippets throughout the documentation referring to Spring XML also apply to Blueprint routes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/bonita-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/bonita-component/</guid>
      <description>Bonita Component Available as of Camel version 2.19
 Used for communicating with a remote Bonita BPM process engine.
 URI format bonita://[operation]?[options]   Where operation is the specific action to perform on Bonita.
  General Options The Bonita component has no options.
 The Bonita endpoint is configured using URI syntax:
 bonita:operation   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     operation</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/boon-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/boon-dataformat/</guid>
      <description>Boon DataFormat Available as of Camel version 2.16
 Boon is a Data Format which uses the Boon JSON marshalling library to unmarshal an JSON payload into Java objects or to marshal Java objects into an JSON payload. Boon aims to be a simple and https://github.com/RichardHightower/json-parsers-benchmark[fast parser] than other common parsers currently used.
 Options The Boon dataformat supports 3 options which are listed below.
     Name Default Java Type Description     unmarshalTypeName</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/box-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/box-component/</guid>
      <description>Box Component Available as of Camel version 2.14
 The Box component provides access to all of the Box.com APIs accessible using box-java-sdk. It allows producing messages to upload and download files, create, edit, and manage folders, etc. It also supports APIs that allow polling for updates to user accounts and even changes to enterprise accounts, etc.
 Box.com requires the use of OAuth2.0 for all client application authentication. In order to use camel-box with your account, you&amp;#8217;ll need to create a new application within Box.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/braintree-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/braintree-component/</guid>
      <description>Braintree Component Available as of Camel version 2.17
 The Braintree component provides access to Braintree Payments trough through theirs Java SDK.
 All client applications need API credential in order to process payments. In order to use camel-braintree with your account, you&amp;#8217;ll need to create a new Sandbox or https://www.braintreepayments.com/signup[Production] account.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cache-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cache-component/</guid>
      <description>EHCache Component (deprecated) Available as of Camel version 2.1
 The cache component enables you to perform caching operations using EHCache as the Cache Implementation. The cache itself is created on demand or if a cache of that name already exists then it is simply utilized with its original settings.
 This component supports producer and event based consumer endpoints.
 The Cache consumer is an event based consumer and can be used to listen and respond to specific cache activities.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/caffeine-cache-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/caffeine-cache-component/</guid>
      <description>Caffeine Cache Component Available as of Camel version 2.20
 The caffeine-cache component enables you to perform caching operations using The simple cache from Caffeine.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-caffeine&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format caffeine-cache://cacheName[?options]   You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/caffeine-loadcache-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/caffeine-loadcache-component/</guid>
      <description>Caffeine LoadCache Component Available as of Camel version 2.20
 The caffeine-loadcache component enables you to perform caching operations using The Load cache from Caffeine.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-caffeine&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format caffeine-loadcache://cacheName[?options]   You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/castor-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/castor-dataformat/</guid>
      <description>Castor DataFormat Available as of Camel version 2.1
 Castor is a Data Format which uses the Castor XML library to unmarshal an XML payload into Java objects or to marshal Java objects into an XML payload.
 As usually you can use either Java DSL or Spring XML to work with Castor Data Format.
 Using the Java DSL from(&#34;direct:order&#34;). marshal().castor(). to(&#34;activemq:queue:order&#34;);   For example the following uses a named DataFormat of Castor which uses default Castor data binding features.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cdi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cdi/</guid>
      <description>Camel CDI The Camel CDI component provides auto-configuration for Apache Camel using CDI as dependency injection framework based on convention-over-configuration. It auto-detects Camel routes available in the application and provides beans for common Camel primitives like Endpoint, FluentProducerTemplate, ProducerTemplate or TypeConverter. It implements standard Camel bean integration so that Camel annotations like @Consume, @Produce and @PropertyInject can be used seamlessly in CDI beans. Besides, it bridges Camel events (e.g. RouteAddedEvent, CamelContextStartedEvent, ExchangeCompletedEvent, &amp;#8230;&amp;#8203;) as CDI events and provides a CDI events endpoint that can be used to consume / produce CDI events from / to Camel routes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/chronicle-engine-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/chronicle-engine-component/</guid>
      <description>Chronicle Engine Component Available as of Camel version 2.18
 The camel chronicle-engine component let you leverage the power of OpenHFT&amp;#8217;s Chronicle-Engine
 URI Format chronicle-engine:addresses/path[?options]    URI Options The Chronicle Engine component has no options.
 The Chronicle Engine endpoint is configured using URI syntax:
 chronicle-engine:addresses/path   with the following path and query parameters:
 Path Parameters (2 parameters):     Name Description Default Type     addresses</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/chunk-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/chunk-component/</guid>
      <description>Chunk Component Available as of Camel version 2.15
 The chunk: component allows for processing a message using a Chunk template. This can be ideal when using Templating to generate responses for requests.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-chunk&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format chunk:templateName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cm-sms-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cm-sms-component/</guid>
      <description>CM SMS Gateway Component Available as of Camel version 2.18
 Camel-Cm-Sms is an Apache Camel component for the [CM SMS Gateway](https://www.cmtelecom.com).
 It allows to integrate CM SMS APIin an application as a camel component.
 You must have a valid account. More information are available at CM Telecom.
 cm-sms://sgw01.cm.nl/gateway.ashx?defaultFrom=DefaultSender&amp;amp;defaultMaxNumberOfParts=8&amp;amp;productToken=xxxxx   Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cmis-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cmis-component/</guid>
      <description>CMIS Component Available as of Camel version 2.11
 The cmis component uses the Apache Chemistry client API and allows you to add/read nodes to/from a CMIS compliant content repositories.
 URI Format cmis://cmisServerUrl[?options]   You can append query options to the URI in the following format, ?options=value&amp;amp;option2=value&amp;amp;&amp;#8230;&amp;#8203;
  CMIS Options The CMIS component supports 2 options which are listed below.
     Name Description Default Type     sessionFacadeFactory (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/coap-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/coap-component/</guid>
      <description>CoAP Component Available as of Camel version 2.16
 Camel-CoAP is an Apache Camel component that allows you to work with CoAP, a lightweight REST-type protocol for machine-to-machine operation. CoAP, Constrained Application Protocol is a specialized web transfer protocol for use with constrained nodes and constrained networks and it is based on RFC 7252.
 Maven users will need to add the following dependency to their pom.xml for this component:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cometd-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cometd-component/</guid>
      <description>CometD Component Available as of Camel version 2.0
 The cometd: component is a transport for working with the jetty implementation of the cometd/bayeux protocol.
Using this component in combination with the dojo toolkit library it&amp;#8217;s possible to push Camel messages directly into the browser using an AJAX based mechanism.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-cometd&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/consul-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/consul-component/</guid>
      <description>Consul Component Available as of Camel version 2.18
 The Consul component is a component for integrating your application with Consul.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-consul&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format consul://domain?[options]   You can append query options to the URI in the following format:
  ?option=value&amp;amp;option=value&amp;amp;...    Options The Consul component supports 9 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/context-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/context-component/</guid>
      <description>Camel Context Component (deprecated) Available as of Camel version 2.7
 The context component allows you to create new Camel Components from a CamelContext with a number of routes which is then treated as a black box, allowing you to refer to the local endpoints within the component from other CamelContexts.
 It is similar to the Routebox component in idea, though the Context component tries to be really simple for end users; just a simple convention over configuration approach to refer to local endpoints inside the CamelContext Component.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/couchbase-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/couchbase-component/</guid>
      <description>Couchbase Component Available as of Camel version 2.19
 The couchbase: component allows you to treat CouchBase instances as a producer or consumer of messages.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-couchbase&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format couchbase:url    Options The Couchbase component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/couchdb-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/couchdb-component/</guid>
      <description>CouchDB Component Available as of Camel version 2.11
 The couchdb: component allows you to treat CouchDB instances as a producer or consumer of messages. Using the lightweight LightCouch API, this camel component has the following features:
   As a consumer, monitors couch changesets for inserts, updates and deletes and publishes these as messages into camel routes.
  As a producer, can save, update and from Camel 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cql-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cql-component/</guid>
      <description>Cassandra CQL Component Available as of Camel version 2.15
 Apache Cassandra is an open source NoSQL database designed to handle large amounts on commodity hardware. Like Amazon&amp;#8217;s DynamoDB, Cassandra has a peer-to-peer and master-less architecture to avoid single point of failure and garanty high availability. Like Google&amp;#8217;s BigTable, Cassandra data is structured using column families which can be accessed through the Thrift RPC API or a SQL-like API called CQL.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/crypto-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/crypto-component/</guid>
      <description>Crypto (JCE) Component Available as of Camel version 2.3
 With Camel cryptographic endpoints and Java&amp;#8217;s Cryptographic extension it is easy to create Digital Signatures for Exchanges. Camel provides a pair of flexible endpoints which get used in concert to create a signature for an exchange in one part of the exchange&amp;#8217;s workflow and then verify the signature in a later part of the workflow.
 Maven users will need to add the following dependency to their pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/crypto-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/crypto-dataformat/</guid>
      <description>Crypto (Java Cryptographic Extension) DataFormat Available as of Camel version 2.3
 The Crypto Data Format integrates the Java Cryptographic Extension into Camel, allowing simple and flexible encryption and decryption of messages using Camel&amp;#8217;s familiar marshall and unmarshal formatting mechanism. It assumes marshalling to mean encryption to cyphertext and unmarshalling to mean decryption back to the original plaintext. This data format implements only symmetric (shared-key) encryption and decyption.
 CryptoDataFormat Options The Crypto (Java Cryptographic Extension) dataformat supports 10 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/csv-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/csv-dataformat/</guid>
      <description>CSV DataFormat Available as of Camel version 1.3
 The CSV Data Format uses Apache Commons CSV to handle CSV payloads (Comma Separated Values) such as those exported/imported by Excel.
 Options The CSV dataformat supports 27 options which are listed below.
     Name Default Java Type Description     formatRef
  String
 The reference format to use it will be updated with the other format options the default value is CSVFormat.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cxf-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cxf-component/</guid>
      <description>CXF Component Available as of Camel version 1.0
 NOTE:When using CXF as a consumer, the CXF Bean Component allows you to factor out how message payloads are received from their processing as a RESTful or SOAP web service. This has the potential of using a multitude of transports to consume web services. The bean component&amp;#8217;s configuration is also simpler and provides the fastest method to implement web services using Camel and CXF.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cxf-transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cxf-transport/</guid>
      <description>What&amp;#8217;s the Camel Transport for CXF In CXF you offer or consume a webservice by defining its address. The first part of the address specifies the protocol to use. For example address=&#34;http://localhost:9000&#34; in an endpoint configuration means your service will be offered using the http protocol on port 9000 of localhost. When you integrate Camel Tranport into CXF you get a new transport &#34;camel&#34;. So you can specify address=&#34;camel://direct:MyEndpointName&#34; to bind the CXF service address to a camel direct endpoint.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/cxfrs-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/cxfrs-component/</guid>
      <description>CXF-RS Component Available as of Camel version 2.0
 The cxfrs: component provides integration with Apache CXF for connecting to JAX-RS 1.1 and 2.0 services hosted in CXF.
 When using CXF as a consumer, the CXF Bean Component allows you to factor out how message payloads are received from their processing as a RESTful or SOAP web service. This has the potential of using a multitude of transports to consume web services.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/digitalocean-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/digitalocean-component/</guid>
      <description>DigitalOcean Component Available as of Camel version 2.19
 The DigitalOcean component allows you to manage Droplets and resources within the DigitalOcean cloud with Camel by encapsulating [digitalocean-api-java](https://www.digitalocean.com/community/projects/api-client-in-java). All of the functionality that you are familiar with in the DigitalOcean control panel is also available through this Camel component.
 Prerequisites You must have a valid DigitalOcean account and a valid OAuth token. You can generate an OAuth token by visiting the [Apps &amp;amp; API](https://cloud.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/disruptor-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/disruptor-component/</guid>
      <description>Disruptor Component Available as of Camel version 2.12
 The disruptor: component provides asynchronous SEDA behavior much as the standard SEDA Component, but utilizes a Disruptor instead of a BlockingQueue utilized by the standard SEDA. Alternatively, a
 disruptor-vm: endpoint is supported by this component, providing an alternative to the standard VM. As with the SEDA component, buffers of the disruptor: endpoints are only visible within a single CamelContext and no support is provided for persistence or recovery.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/dns-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/dns-component/</guid>
      <description>DNS Component Available as of Camel version 2.7
 This is an additional component for Camel to run DNS queries, using DNSJava. The component is a thin layer on top of DNSJava.
The component offers the following operations:
   ip, to resolve a domain by its ip
  lookup, to lookup information about the domain
  dig, to run DNS queries
   INFO:*Requires SUN JVM* The DNSJava library requires running on the SUN JVM.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/docker-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/docker-component/</guid>
      <description>Docker Component Available as of Camel version 2.15
 Camel component for communicating with Docker.
 The Docker Camel component leverages the docker-java via the Docker Remote API.
 URI format docker://[operation]?[options]   Where operation is the specific action to perform on Docker.
  General Options The Docker component supports 2 options which are listed below.
     Name Description Default Type     configuration (advanced)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/dozer-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/dozer-component/</guid>
      <description>Dozer Component Available as of Camel version 2.15
 The dozer: component provides the ability to map between Java beans using the Dozer mapping framework since Camel 2.15.0. Camel also supports the ability to trigger Dozer mappings as a type converter. The primary differences between using a Dozer endpoint and a Dozer converter are:
   The ability to manage Dozer mapping configuration on a per-endpoint basis vs. global configuration via the converter registry.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/drill-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/drill-component/</guid>
      <description>Drill Component Available as of Camel version 2.19
 The drill: component gives you the ability to querying to Apache Drill Cluster
 Drill is an Apache open-source SQL query engine for Big Data exploration. Drill is designed from the ground up to support high-performance analysis on the semi-structured and rapidly evolving data coming from modern Big Data applications, while still providing the familiarity and ecosystem of ANSI SQL, the industry-standard query language</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/dropbox-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/dropbox-component/</guid>
      <description>Dropbox Component Available as of Camel version 2.14
 The dropbox: component allows you to treat Dropbox remote folders as a producer or consumer of messages. Using the Dropbox Java Core API (reference version for this component is 1.7.x), this camel component has the following features:
   As a consumer, download files and search files by queries
  As a producer, download files, move files between remote directories, delete files/dir, upload files and search files by queries</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/eclipse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/eclipse/</guid>
      <description>Eclipse Component Available as of Camel 2.3
 The camel-eclipse is a component which allows you to run Camel with Eclipse RCP. This component is needed due Eclipse classloading challenges. The component is a specialized Camel Pluggable Class Resolvers to remedy this.
 The resolver is provided in the class org.apache.camel.component.eclipse.EclipsePackageScanClassResolver in the camel-eclipse jar file.
 Using with Java DSL You need to configure the resolver on the CamelContext which is done like this:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ehcache-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ehcache-component/</guid>
      <description>Ehcache Component Available as of Camel version 2.18
 The ehcache component enables you to perform caching operations using Ehcache 3 as the Cache Implementation.
 This component supports producer and event based consumer endpoints.
 The Cache consumer is an event based consumer and can be used to listen and respond to specific cache activities.
 Maven users will need to add the following dependency to their pom.xml for this component:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ejb-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ejb-component/</guid>
      <description>EJB Component Available as of Camel version 2.4
 The ejb: component binds EJBs to Camel message exchanges.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ejb&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format ejb:ejbName[?options]   Where ejbName can be any string which is used to look up the EJB in the Application Server JNDI Registry</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/el-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/el-language/</guid>
      <description>EL Language (deprecated) Available as of Camel version 1.1.0
 EL Camel supports the unified JSP and JSF Expression Language via the JUEL to allow an Expression or Predicate to be used in the DSL or Xml Configuration.
 For example you could use EL inside a Message Filter in XML
 &amp;lt;route&amp;gt; &amp;lt;from uri=&#34;seda:foo&#34;/&amp;gt; &amp;lt;filter&amp;gt; &amp;lt;el&amp;gt;${in.headers.foo == &#39;bar&#39;}&amp;lt;/el&amp;gt; &amp;lt;to uri=&#34;seda:bar&#34;/&amp;gt; &amp;lt;/filter&amp;gt; &amp;lt;/route&amp;gt;   You could also use slightly different syntax, e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/elasticsearch-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/elasticsearch-component/</guid>
      <description>Elasticsearch Component Available as of Camel version 2.11
 The ElasticSearch component allows you to interface with an ElasticSearch server.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-elasticsearch&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format elasticsearch://clusterName[?options]    Endpoint Options The Elasticsearch component supports 2 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/elasticsearch5-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/elasticsearch5-component/</guid>
      <description>Elasticsearch5 Component Available as of Camel version 2.19
 The ElasticSearch component allows you to interface with an ElasticSearch 5.x API.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-elasticsearch5&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format elasticsearch5://clusterName[?options]    Endpoint Options The Elasticsearch5 component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/elsql-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/elsql-component/</guid>
      <description>ElSQL Component Available as of Camel version 2.16
 The elsql: component is an extension to the existing SQL Component that uses ElSql to define the SQL queries.
 This component uses spring-jdbc behind the scenes for the actual SQL handling.
 This component can be used as a Transactional Client.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-elsql&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/etcd-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/etcd-component/</guid>
      <description>etcd Component Available as of Camel version 2.18
 The camel etcd component allows you to work with Etcd, a distributed reliable key-value store.
 URI Format etcd:namespace/path[?options]    URI Options The etcd component supports 7 options which are listed below.
     Name Description Default Type     uris (common)
 To set the URIs the client connects.
  String
   sslContextParameters (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/eventadmin-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/eventadmin-component/</guid>
      <description>OSGi EventAdmin Component Available as of Camel version 2.6
 The eventadmin component can be used in an OSGi environment to receive OSGi EventAdmin events and process them.
 Dependencies Maven users need to add the following dependency to their pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-eventadmin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel (2.6.0 or higher).
  URI format eventadmin:topic[?options]   where topic is the name of the topic to listen too.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/exec-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/exec-component/</guid>
      <description>Exec Component Available as of Camel version 2.3
 The exec component can be used to execute system commands.
 Dependencies Maven users need to add the following dependency to their pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-exec&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel (2.3.0 or higher).
  URI format exec://executable[?options]   where executable is the name, or file path, of the system command that will be executed.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/facebook-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/facebook-component/</guid>
      <description>Facebook Component Available as of Camel version 2.14
 The Facebook component provides access to all of the Facebook APIs accessible using Facebook4J. It allows producing messages to retrieve, add, and delete posts, likes, comments, photos, albums, videos, photos, checkins, locations, links, etc. It also supports APIs that allow polling for posts, users, checkins, groups, locations, etc.
 Facebook requires the use of OAuth for all client application authentication. In order to use camel-facebook with your account, you&amp;#8217;ll need to create a new application within Facebook at https://developers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/flatpack-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/flatpack-component/</guid>
      <description>Flatpack Component Available as of Camel version 1.4
 The Flatpack component supports fixed width and delimited file parsing via the FlatPack library.
Notice: This component only supports consuming from flatpack files to Object model. You can not (yet) write from Object model to flatpack format.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-flatpack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format flatpack:[delim|fixed]:flatPackConfig.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/flatpack-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/flatpack-dataformat/</guid>
      <description>Flatpack DataFormat Available as of Camel version 2.1
 The Flatpack component ships with the Flatpack data format that can be used to format between fixed width or delimited text messages to a List of rows as Map.
   marshal = from List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; to OutputStream (can be converted to String)
  unmarshal = from java.io.InputStream (such as a File or String) to a java.util.List as an org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/flink-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/flink-component/</guid>
      <description>Apache Flink Component Available as of Camel version 2.18
 This documentation page covers the Apache Flink component for the Apache Camel. The camel-flink component provides a bridge between Camel connectors and Flink tasks.
This Camel Flink connector provides a way to route message from various transports, dynamically choosing a flink task to execute, use incoming message as input data for the task and finally deliver the results back to the Camel pipeline.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/fop-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/fop-component/</guid>
      <description>FOP Component Available as of Camel version 2.10
 The FOP component allows you to render a message into different output formats using Apache FOP.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-fop&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format fop://outputFormat?[options]    Output Formats The primary output format is PDF but other output formats are also supported:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/freemarker-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/freemarker-component/</guid>
      <description>Freemarker Component Available as of Camel version 2.10
 The freemarker: component allows for processing a message using a FreeMarker template. This can be ideal when using Templating to generate responses for requests.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format freemarker:templateName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ftp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ftp-component/</guid>
      <description>FTP Component Available as of Camel version 1.1
 This component provides access to remote file systems over the FTP and SFTP protocols.
 When consuming from remote FTP server make sure you read the section titled Default when consuming files further below for details related to consuming files.
 Absolute path is not supported. Camel 2.16 will translate absolute path to relative by trimming all leading slashes from directoryname. There&amp;#8217;ll be WARN message printed in the logs.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ftps-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ftps-component/</guid>
      <description>FTPS Component Available as of Camel version 2.2
 This component provides access to remote file systems over the FTP and SFTP protocols.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ftp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   For more information you can look at FTP component
 URI Options The options below are exclusive for the FTPS component.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ganglia-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ganglia-component/</guid>
      <description>Ganglia Component Available as of Camel version 2.15
 Provides a mechanism to send a value (the message body) as a metric to the Ganglia monitoring system. Uses the gmetric4j library. Can be used in conjunction with standard Ganglia and JMXetric for monitoring metrics from the OS, JVM and business processes through a single platform.
 You should have a Ganglia gmond agent running on the machine where your JVM runs.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/geocoder-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/geocoder-component/</guid>
      <description>Geocoder Component Available as of Camel version 2.12
 The geocoder: component is used for looking up geocodes (latitude and longitude) for a given address, or reverse lookup. The component uses the Java API for Google Geocoder library.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-geocoder&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format geocoder:address:name[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/git-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/git-component/</guid>
      <description>Git Component Available as of Camel version 2.16
 The git: component allows you to work with a generic Git repository.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-git&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI Format
 git://localRepositoryPath[?options]   URI Options The producer allows to do operations on a specific repository.
The consumer allows consuming commits, tags and branches on a specific repository.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/github-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/github-component/</guid>
      <description>GitHub Component Available as of Camel version 2.15
 The GitHub component interacts with the GitHub API by encapsulating http://org.eclipse.egit.github.core[egit-github]. It currently provides polling for new pull requests, pull request comments, tags, and commits. It is also able to produce comments on pull requests, as well as close the pull request entirely.
 Rather than webhooks, this endpoint relies on simple polling. Reasons include:
   Concern for reliability/stability</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/google-calendar-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/google-calendar-component/</guid>
      <description>Google Calendar Component Available as of Camel version 2.15
 Component Description The Google Calendar component provides access to http://google.com/calendar[Google Calendar] via the https://developers.google.com/google-apps/calendar/v3/reference/[Google Calendar Web APIs].
 Google Calendar uses the https://developers.google.com/accounts/docs/OAuth2[OAuth 2.0 protocol] for authenticating a Google account and authorizing access to user data. Before you can use this component, you will need to https://developers.google.com/google-apps/calendar/auth[create an account and generate OAuth credentials]. Credentials comprise of a clientId, clientSecret, and a refreshToken.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/google-drive-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/google-drive-component/</guid>
      <description>Google Drive Component Available as of Camel version 2.14
 The Google Drive component provides access to the Google Drive file storage service via the Google Drive Web APIs.
 Google Drive uses the https://developers.google.com/accounts/docs/OAuth2[OAuth 2.0 protocol] for authenticating a Google account and authorizing access to user data. Before you can use this component, you will need to create an account and generate OAuth credentials. Credentials comprise of a clientId, clientSecret, and a refreshToken.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/google-mail-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/google-mail-component/</guid>
      <description>Google Mail Component Available as of Camel version 2.15
 Component Description The Google Mail component provides access to http://gmail.com/[Gmail] via the https://developers.google.com/gmail/api/v1/reference/[Google Mail Web APIs].
 Google Mail uses the https://developers.google.com/accounts/docs/OAuth2[OAuth 2.0 protocol] for authenticating a Google account and authorizing access to user data. Before you can use this component, you will need to https://developers.google.com/gmail/api/auth/web-server[create an account and generate OAuth credentials]. Credentials comprise of a clientId, clientSecret, and a refreshToken.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/google-pubsub-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/google-pubsub-component/</guid>
      <description>Google Pubsub Component Available as of Camel version 2.19
 Component Description The Google Pubsub component provides access to Cloud Pub/Sub Infrastructure via the Google Client Services API.
 The current implementation does not use gRPC.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-google-pubsub&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Authentication Configuration</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/gora-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/gora-component/</guid>
      <description>Gora Component Available as of Camel version 2.14
 Camel-Gora is an Apache Camel component that allows you to work with NoSQL databases using the Apache Gora framework.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-gora&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Apache Gora Overview The Apache Gora open source framework provides an in-memory data model and persistence for big data.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/grape-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/grape-component/</guid>
      <description>Grape Component Available as of Camel version 2.16
 Grape component allows you to fetch, load and manage additional jars when CamelContext is running. In practice with Camel Grape component you can add new components, data formats and beans to your CamelContext without the restart of the router.
 Grape options The Grape component has no options.
 The Grape endpoint is configured using URI syntax:
 grape:defaultCoordinates   with the following path and query parameters:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/groovy-dsl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/groovy-dsl/</guid>
      <description>About the Groovy DSL The Groovy DSL implementation is built on top of the existing Java-based DSL, but it additionally allows to use Groovy language features in your routes, particularly Closures acting as Processor, Expression, Predicate, or Aggregation Strategy.
With the Groovy DSL you write your RouteBuilder classes entirely in Groovy, while the scripting component allows to embed small scripts into Java routes. The Groovy DSL requires Groovy 2.0 or newer and is available as of Camel 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/groovy-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/groovy-language/</guid>
      <description>Groovy Language Available as of Camel version 1.3
 Camel supports Groovy among other Scripting Languages to allow an Expression or Predicate to be used in the DSL or Xml Configuration.
 To use a Groovy expression use the following Java code
 ... groovy(&#34;someGroovyExpression&#34;) ...   For example you could use the groovy function to create an Predicate in a Message Filter or as an Expression for a Recipient List</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/grpc-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/grpc-component/</guid>
      <description>gRPC Component Available as of Camel version 2.19
 The gRPC component allows you to call or expose Remote Procedure Call (RPC) services using Protocol Buffers (protobuf) exchange format over HTTP/2 transport.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-grpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format grpc://service[?options]    Endpoint Options The gRPC component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/guava-eventbus-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/guava-eventbus-component/</guid>
      <description>Guava EventBus Component Available as of Camel version 2.10
 Available since Camel 2.10.0
 The Google Guava EventBus allows publish-subscribe-style communication between components without requiring the components to explicitly register with one another (and thus be aware of each other). The guava-eventbus: component provides integration bridge between Camel and Google Guava EventBus infrastructure. With the latter component, messages exchanged with the Guava EventBus can be transparently forwarded to the Camel routes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/guice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/guice/</guid>
      <description>Camel Guice We have support for Google Guice as a dependency injection framework.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-guice&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Dependency Injecting Camel with Guice The GuiceCamelContext is designed to work nicely inside Guice. You then need to bind it using some Guice Module.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hawtdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hawtdb/</guid>
      <description>HawtDB Available as of Camel 2.3
 HawtDB is a very lightweight and embedable key value database. It allows together with Camel to provide persistent support for various Camel features such as Aggregator.
 Deprecated
 The HawtDB project is being deprecated and replaced by leveldb as the lightweight and embedable key value database. To make using leveldb easy there is a leveldbjni project for that. The Apache ActiveMQ project is planning on using leveldb as their primary file based message store in the future, to replace kahadb.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-atomicvalue-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-atomicvalue-component/</guid>
      <description>Hazelcast Atomic Number Component Available as of Camel version 2.7
 The Hazelcast atomic number component is one of Camel Hazelcast Components which allows you to access Hazelcast atomic number. An atomic number is an object that simply provides a grid wide number (long).
 There is no consumer for this endpoint!
 Options The Hazelcast Atomic Number component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-instance-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-instance-component/</guid>
      <description>Hazelcast Instance Component Available as of Camel version 2.7
 The Hazelcast instance component is one of Camel Hazelcast Components which allows you to consume join/leave events of the cache instance in the cluster. Hazelcast makes sense in one single &#34;server node&#34;, but it&amp;#8217;s extremly powerful in a clustered environment.
 This endpoint provides no producer!
 Options The Hazelcast Instance component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-list-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-list-component/</guid>
      <description>Hazelcast List Component Available as of Camel version 2.7
 The Hazelcast List component is one of Camel Hazelcast Components which allows you to access Hazelcast distributed list.
 Options The Hazelcast List component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)
 The hazelcast instance reference which can be used for hazelcast endpoint. If you don&amp;#8217;t specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-map-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-map-component/</guid>
      <description>Hazelcast Map Component Available as of Camel version 2.7
 The Hazelcast Map component is one of Camel Hazelcast Components which allows you to access Hazelcast distributed map.
 Options The Hazelcast Map component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)
 The hazelcast instance reference which can be used for hazelcast endpoint. If you don&amp;#8217;t specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-multimap-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-multimap-component/</guid>
      <description>Hazelcast Multimap Component Available as of Camel version 2.7
 The Hazelcast Multimap component is one of Camel Hazelcast Components which allows you to access Hazelcast distributed multimap.
 Options The Hazelcast Multimap component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)
 The hazelcast instance reference which can be used for hazelcast endpoint. If you don&amp;#8217;t specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-queue-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-queue-component/</guid>
      <description>Hazelcast Queue Component Available as of Camel version 2.7
 The Hazelcast Queue component is one of Camel Hazelcast Components which allows you to access Hazelcast distributed queue.
 Options The Hazelcast Queue component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)
 The hazelcast instance reference which can be used for hazelcast endpoint. If you don&amp;#8217;t specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-replicatedmap-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-replicatedmap-component/</guid>
      <description>Hazelcast Replicated Map Component Available as of Camel version 2.16
 The Hazelcast instance component is one of Camel Hazelcast Components which allows you to consume join/leave events of the cache instance in the cluster. A replicated map is a weakly consistent, distributed key-value data structure with no data partition.
 Options The Hazelcast Replicated Map component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-ringbuffer-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-ringbuffer-component/</guid>
      <description>Hazelcast Ringbuffer Component Available as of Camel version 2.16
 Avalaible from Camel 2.16
 The Hazelcast ringbuffer component is one of Camel Hazelcast Components which allows you to access Hazelcast ringbuffer. Ringbuffer is a distributed data structure where the data is stored in a ring-like structure. You can think of it as a circular array with a certain capacity.
 Options The Hazelcast Ringbuffer component supports 3 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-seda-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-seda-component/</guid>
      <description>Hazelcast SEDA Component Available as of Camel version 2.7
 The Hazelcast SEDA component is one of Camel Hazelcast Components which allows you to access Hazelcast BlockingQueue. SEDA component differs from the rest components provided. It implements a work-queue in order to support asynchronous SEDA architectures, similar to the core &#34;SEDA&#34; component.
 Options The Hazelcast SEDA component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-set-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-set-component/</guid>
      <description>Hazelcast Set Component Available as of Camel version 2.7
 The Hazelcast Set component is one of Camel Hazelcast Components which allows you to access Hazelcast distributed set.
 Options The Hazelcast Set component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)
 The hazelcast instance reference which can be used for hazelcast endpoint. If you don&amp;#8217;t specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast-topic-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast-topic-component/</guid>
      <description>Hazelcast Topic Component Available as of Camel version 2.15
 The Hazelcast Topic component is one of Camel Hazelcast Components which allows you to access Hazelcast distributed topic.
 Options The Hazelcast Topic component supports 3 options which are listed below.
     Name Description Default Type     hazelcastInstance (advanced)
 The hazelcast instance reference which can be used for hazelcast endpoint. If you don&amp;#8217;t specify the instance reference camel use the default hazelcast instance from the camel-hazelcast instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hazelcast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hazelcast/</guid>
      <description>Hazelcast Component Available as of Camel version 2.7
 The hazelcast- component allows you to work with the Hazelcast distributed data grid / cache. Hazelcast is a in memory data grid, entirely written in Java (single jar). It offers a great palette of different data stores like map, multi map (same key, n values), queue, list and atomic number. The main reason to use Hazelcast is its simple cluster support. If you have enabled multicast on your network you can run a cluster with hundred nodes with no extra configuration.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hbase-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hbase-component/</guid>
      <description>HBase Component Available as of Camel version 2.10
 This component provides an idemptotent repository, producers and consumers for Apache HBase.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-hbase&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Apache HBase Overview HBase is an open-source, distributed, versioned, column-oriented store modeled after Google&amp;#8217;s Bigtable: A Distributed Storage System for Structured Data.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hdfs-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hdfs-component/</guid>
      <description>HDFS Component (deprecated) Available as of Camel version 2.8
 The hdfs component enables you to read and write messages from/to an HDFS file system. HDFS is the distributed file system at the heart of Hadoop.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-hdfs&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format hdfs://hostname[:port][/path][?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hdfs2-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hdfs2-component/</guid>
      <description>HDFS2 Component Available as of Camel version 2.14
 The hdfs2 component enables you to read and write messages from/to an HDFS file system using Hadoop 2.x. HDFS is the distributed file system at the heart of Hadoop.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-hdfs2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format hdfs2://hostname[:port][/path][?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/headersmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/headersmap/</guid>
      <description>HeadersMap Available as of Camel 2.20
 The camel-headersmap is a faster implementation of a case-insenstive map which can be plugged in and used by Camel at runtime to have slight faster performance in the Camel Message headers.
 Auto detection from classpath To use this implementation all you need to do is to add the camel-headersmap dependency to the classpath, and Camel should auto-detect this on startup and log as follows:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hessian-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hessian-dataformat/</guid>
      <description>Hessian DataFormat Available as of Camel version 2.17
 Hessian is Data Format for marshalling and unmarshalling messages using Caucho&amp;#8217;s Hessian format.
 If you want to use Hessian Data Format from Maven, add the following dependency to your pom.xml:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-hessian&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Options The Hessian dataformat supports 1 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hipchat-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hipchat-component/</guid>
      <description>Hipchat Component Available as of Camel version 2.15
 The Hipchat component supports producing and consuming messages from/to Hipchat service.
 Prerequisites
 You must have a valid Hipchat user account and get a personal access token that you can use to produce/consume messages.
 URI Format hipchat://[host][:port]?options   You can append query options to the URI in the following format, ?options=value&amp;amp;option2=value&amp;amp;&amp;#8230;&amp;#8203;
  URI Options The Hipchat component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hl7-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hl7-dataformat/</guid>
      <description>HL7 DataFormat Available as of Camel version 2.0
 The HL7 component is used for working with the HL7 MLLP protocol and HL7 v2 messages using the HAPI library.
 This component supports the following:
   HL7 MLLP codec for Mina
  HL7 MLLP codec for Netty4 from Camel 2.15 onwards
  Type Converter from/to HAPI and String
  HL7 DataFormat using the HAPI library</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/http-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/http-component/</guid>
      <description>HTTP Component (deprecated) Available as of Camel version 1.0
 The http: component provides HTTP based endpoints for consuming external HTTP resources (as a client to call external servers using HTTP).
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-http&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format http:hostname[:port][/resourceUri][?param1=value1][&amp;amp;param2=value2]   Will by default use port 80 for HTTP and 443 for HTTPS.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/http4-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/http4-component/</guid>
      <description>HTTP4 Component Available as of Camel version 2.3
 The http4: component provides HTTP based endpoints for calling external HTTP resources (as a client to call external servers using HTTP).
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-http4&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   camel-http4 vs camel-http
 Camel-http4 uses Apache HttpClient 4.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/hystrix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/hystrix/</guid>
      <description>Hystrix Component Available as of Camel version 2.18
 The hystrix component integrates Netflix Hystrix circuit breaker in Camel routes.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-hystrix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   For more information see the Hystrix EIP
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ibatis-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ibatis-component/</guid>
      <description>iBatis Component (deprecated) Available as of Camel version 1.2
 The ibatis: component allows you to query, poll, insert, update and delete data in a relational database using Apache iBATIS.
 Prefer MyBatis
 The Apache iBatis project is no longer active. The project is moved outside Apache and is now know as the MyBatis project.
Therefore we encourage users to use MyBatis instead. This camel-ibatis component will be removed in Camel 3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ical-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ical-dataformat/</guid>
      <description>iCal DataFormat Available as of Camel version 2.12
 The ICal dataformat is used for working with iCalendar messages.
 A typical iCalendar message looks like:
 BEGIN:VCALENDAR VERSION:2.0 PRODID:-//Events Calendar//iCal4j 1.0//EN CALSCALE:GREGORIAN BEGIN:VEVENT DTSTAMP:20130324T180000Z DTSTART:20130401T170000 DTEND:20130401T210000 SUMMARY:Progress Meeting TZID:America/New_York UID:00000000 ATTENDEE;ROLE=REQ-PARTICIPANT;CN=Developer 1:mailto:dev1@mycompany.com ATTENDEE;ROLE=OPT-PARTICIPANT;CN=Developer 2:mailto:dev2@mycompany.com END:VEVENT END:VCALENDAR   Options The iCal dataformat supports 2 options which are listed below.
     Name Default Java Type Description     validating</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite-cache-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite-cache-component/</guid>
      <description>Ignite Cache Component Available as of Camel version 2.17
 The Ignite Cache endpoint is one of camel-ignite endpoints which allows you to interact with an Ignite Cache. This offers both a Producer (to invoke cache operations on an Ignite cache) and a Consumer (to consume changes from a continuous query).
 The cache value is always the body of the message, whereas the cache key is always stored in the IgniteConstants.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite-compute-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite-compute-component/</guid>
      <description>Ignite Compute Component Available as of Camel version 2.17
 The Ignite Compute endpoint is one of camel-ignite endpoints which allows you to run compute operations on the cluster by passing in an IgniteCallable, an IgniteRunnable, an IgniteClosure, or collections of them, along with their parameters if necessary.
 This endpoint only supports producers.
 The host part of the endpoint URI is a symbolic endpoint ID, it is not used for any purposes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite-events-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite-events-component/</guid>
      <description>Ignite Events Component Available as of Camel version 2.17
 The Ignite Events endpoint is one of camel-ignite endpoints which allows you to receive events from the Ignite cluster by creating a local event listener.
 This endpoint only supports consumers. The Exchanges created by this consumer put the received Event object into the body of the IN message.
 Options The Ignite Events component supports 4 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite-idgen-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite-idgen-component/</guid>
      <description>Ignite ID Generator Component Available as of Camel version 2.17
 The Ignite ID Generator endpoint is one of camel-ignite endpoints which allows you to interact with Ignite Atomic Sequences and ID Generators.
 This endpoint only supports producers.
 Options The Ignite ID Generator component supports 4 options which are listed below.
     Name Description Default Type     ignite (producer)
 Sets the Ignite instance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite-messaging-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite-messaging-component/</guid>
      <description>Ignite Messaging Component Available as of Camel version 2.17
 The Ignite Messaging endpoint is one of camel-ignite endpoints which allows you to send and consume messages from an Ignite topic.
 This endpoint supports producers (to send messages) and consumers (to receive messages).
 Options The Ignite Messaging component supports 4 options which are listed below.
     Name Description Default Type     ignite (common)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite-queue-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite-queue-component/</guid>
      <description>Ignite Queues Component Available as of Camel version 2.17
 The Ignite Queue endpoint is one of camel-ignite endpoints which allows you to interact with Ignite Queue data structures.
 This endpoint only supports producers.
 Options The Ignite Queues component supports 4 options which are listed below.
     Name Description Default Type     ignite (producer)
 Sets the Ignite instance.
  Ignite</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite-set-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite-set-component/</guid>
      <description>Ignite Sets Component Available as of Camel version 2.17
 The Ignite Sets endpoint is one of camel-ignite endpoints which allows you to interact with Ignite Set data structures.
 This endpoint only supports producers.
 Options The Ignite Sets component supports 4 options which are listed below.
     Name Description Default Type     ignite (producer)
 Sets the Ignite instance.
  Ignite</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ignite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ignite/</guid>
      <description>Ignite endpoints Component Available as of Camel version 2.17
 Apache Ignite In-Memory Data Fabric is a high-performance, integrated and distributed in-memory platform for computing and transacting on large-scale data sets in real-time, orders of magnitude faster than possible with traditional disk-based or flash technologies. It is designed to deliver uncompromised performance for a wide set of in-memory computing use cases from high performance computing, to the industry most advanced data grid, highly available service grid, and streaming.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/infinispan-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/infinispan-component/</guid>
      <description>Infinispan Component Available as of Camel version 2.13
 This component allows you to interact with Infinispan distributed data grid / cache. Infinispan is an extremely scalable, highly available key/value data store and data grid platform written in Java.
 From Camel 2.17 onwards Infinispan requires Java 8.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-infinispan&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format infinispan://cacheName?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/influxdb-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/influxdb-component/</guid>
      <description>InfluxDB Component Available as of Camel version 2.18
 This component allows you to interact with InfluxDB https://influxdata.com/time-series-platform/influxdb/ a time series database. The native body type for this component is Point (the native influxdb class), but it can also accept Map&amp;lt;String, Object&amp;gt; as message body and it will get converted to Point.class, please note that the map must contain an element with InfluxDbConstants.MEASUREMENT_NAME as key.
 Aditionally of course you may register your own Converters to your data type to Point, or use the (un)marshalling tools provided by camel.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/irc-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/irc-component/</guid>
      <description>IRC Component Available as of Camel version 1.1
 The irc component implements an IRC (Internet Relay Chat) transport.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-irc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format irc:nick@host[:port]/#room[?options] irc:nick@host[:port]?channels=#channel1,#channel2,#channel3[?options]   You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ironmq-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ironmq-component/</guid>
      <description>IronMQ Component Available as of Camel version 2.17
 The IronMQ component provides integration with IronMQ an elastic and durable hosted message queue as a service.
 The component uses the IronMQ java client library.
 To run it requires a IronMQ account, and a project id and token.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ironmq&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jacksonxml-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jacksonxml-dataformat/</guid>
      <description>JacksonXML DataFormat Available as of Camel version 2.16
 Jackson XML is a Data Format which uses the Jackson library with the XMLMapper extension to unmarshal an XML payload into Java objects or to marshal Java objects into an XML payload.
 INFO:If you are familiar with Jackson, this XML data format behaves in the same way as its JSON counterpart, and thus can be used with classes annotated for JSON serialization/deserialization.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jasypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jasypt/</guid>
      <description>Jasypt component Available as of Camel 2.5
 Jasypt is a simplified encryption library which makes encryption and decryption easy. Camel integrates with Jasypt to allow sensitive information in Properties files to be encrypted. By dropping camel-jasypt on the classpath those encrypted values will automatically be decrypted on-the-fly by Camel. This ensures that human eyes can&amp;#8217;t easily spot sensitive information such as usernames and passwords.
 Maven users will need to add the following dependency to their pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/javascript-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/javascript-language/</guid>
      <description>JavaScript Language Available as of Camel version 1.0
 Camel supports JavaScript/ECMAScript among other Scripting Languages to allow an Expression or Predicate to be used in the DSL or Xml Configuration.
 To use a JavaScript expression use the following Java code
 ... javaScript(&#34;someJavaScriptExpression&#34;) ...   For example you could use the javaScript function to create an Predicate in a Message Filter or as an Expression for a Recipient List</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/javaspace-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/javaspace-component/</guid>
      <description>JavaSpace Component (deprecated) Available as of Camel version 2.1
 The javaspace component is a transport for working with any JavaSpace compliant implementation and this component has been tested with both the Blitz implementation and the GigaSpace implementation.
This component can be used for sending and receiving any object inheriting from the Jini net.jini.core.entry.Entry class. It is also possible to pass the bean ID of a template that can be used for reading/taking the entries from the space.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jaxb-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jaxb-dataformat/</guid>
      <description>JAXB DataFormat Available as of Camel version 1.0
 JAXB is a Data Format which uses the JAXB2 XML marshalling standard which is included in Java 6 to unmarshal an XML payload into Java objects or to marshal Java objects into an XML payload.
 Options The JAXB dataformat supports 17 options which are listed below.
     Name Default Java Type Description     contextPath</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jbpm-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jbpm-component/</guid>
      <description>JBPM Component Available as of Camel version 2.6
 The jbpm component provides integration with Business Process Management (BPM) Suit jBPM. It uses kie-remote-client API to interact with jBPM instance over REST. The component supports only producer.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jbpm&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt;&amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format jbpm::hostName[:port][/resourceUri][?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jcache-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jcache-component/</guid>
      <description>JCache Component Available as of Camel version 2.17
 The jcache component enables you to perform caching operations using JSR107/JCache as cache implementation.
 URI Format jcache:cacheName[?options]    URI Options The JCache endpoint is configured using URI syntax:
 jcache:cacheName   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     cacheName
 Required The name of the cache</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jclouds-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jclouds-component/</guid>
      <description>JClouds Component Available as of Camel version 2.9
 This component allows interaction with cloud provider key-value engines (blobstores) and compute services. The component uses jclouds which is
a library that provides abstractions for blobstores and compute services.
 ComputeService simplifies the task of managing machines in the cloud. For example, you can use ComputeService to start 5 machines and install your software on them.
BlobStore simplifies dealing with key-value providers such as Amazon S3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jcr-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jcr-component/</guid>
      <description>JCR Component Available as of Camel version 1.3
 The jcr component allows you to add/read nodes to/from a JCR compliant content repository (for example, Apache Jackrabbit) with its producer, or register an EventListener with the consumer.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jcr&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format jcr://user:password@repository/path/to/node   Consumer added</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jdbc-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jdbc-component/</guid>
      <description>JDBC Component Available as of Camel version 1.2
 The jdbc component enables you to access databases through JDBC, where SQL queries (SELECT) and operations (INSERT, UPDATE, etc) are sent in the message body. This component uses the standard JDBC API, unlike the SQL Component component, which uses spring-jdbc.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jetty-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jetty-component/</guid>
      <description>Jetty 9 Component Available as of Camel version 1.2
   Warning  The producer is deprecated - do not use. We only recommend using jetty as consumer (eg from jetty)     The jetty component provides HTTP-based endpoints for consuming and producing HTTP requests. That is, the Jetty component behaves as a simple Web server.
Jetty can also be used as a http client which mean you can also use it with Camel as a producer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jgroups-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jgroups-component/</guid>
      <description>JGroups Component Available as of Camel version 2.13
 JGroups is a toolkit for reliable multicast communication. The jgroups: component provides exchange of messages between Camel infrastructure and JGroups clusters.
 Maven users will need to add the following dependency to their pom.xml for this component.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache-extras.camel-extra&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jgroups&amp;lt;/artifactId&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;version&amp;gt;x.y.z&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   Starting from the Camel 2.13.0, JGroups component has been moved from Camel Extra under the umbrella of the Apache Camel.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jibx-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jibx-dataformat/</guid>
      <description>JiBX DataFormat Available as of Camel version 2.6
 JiBX is a Data Format which uses the JiBX library to marshal and unmarshal Java objects to and from XML.
 // lets turn Object messages into XML then send to MQSeries from(&#34;activemq:My.Queue&#34;). marshal().jibx(). to(&#34;mqseries:Another.Queue&#34;);   Please note that marshaling process can recognize the message type at the runtime. However while unmarshaling message from XML we need to specify target class explicitly.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jing-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jing-component/</guid>
      <description>Jing Component Available as of Camel version 1.1
 The Jing component uses the Jing Library to perform XML validation of the message body using either
   RelaxNG XML Syntax
  RelaxNG Compact Syntax
   Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jing&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Note that the MSV component can also support RelaxNG XML syntax.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jira-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jira-component/</guid>
      <description>JIRA Component Available as of Camel version 2.15
 The JIRA component interacts with the JIRA API by encapsulating Atlassian&amp;#8217;s https://marketplace.atlassian.com/plugins/com.atlassian.jira.jira-rest-java-client[REST Java Client for JIRA]. It currently provides polling for new issues and new comments. It is also able to create new issues.
 Rather than webhooks, this endpoint relies on simple polling. Reasons include:
   Concern for reliability/stability
  The types of payloads we&amp;#8217;re polling aren&amp;#8217;t typically large (plus, paging is available in the API)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jms-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jms-component/</guid>
      <description>JMS Component JMS Component   Tip  Using ActiveMQ
 If you are using Apache ActiveMQ, you should prefer the ActiveMQ component as it has been optimized for ActiveMQ. All of the options and samples on this page are also valid for the ActiveMQ component.
       Note  Transacted and caching
 See section Transactions and Cache Levels below if you are using transactions with JMS as it can impact performance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jmx-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jmx-component/</guid>
      <description>JMX Component Camel JMX Apache Camel has extensive support for JMX to allow you to monitor and control the Camel managed objects with a JMX client.
 Camel also provides a JMX component that allows you to subscribe to MBean notifications. This page is about how to manage and monitor Camel using JMX.
  Options The JMX component has no options.
 The JMX endpoint is configured using URI syntax:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jolt-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jolt-component/</guid>
      <description>JOLT Component Available as of Camel version 2.16
 The jolt: component allows you to process a JSON messages using an JOLT specification. This can be ideal when doing JSON to JSON transformation.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format jolt:specName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jpa-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jpa-component/</guid>
      <description>JPA Component Available as of Camel version 1.0
 The jpa component enables you to store and retrieve Java objects from persistent storage using EJB 3&amp;#8217;s Java Persistence Architecture (JPA), which is a standard interface layer that wraps Object/Relational Mapping (ORM) products such as OpenJPA, Hibernate, TopLink, and so on.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jpa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/json-fastjson-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/json-fastjson-dataformat/</guid>
      <description>JSon Fastjson DataFormat Available as of Camel version 2.20
 Fastjson is a Data Format which uses the Fastjson Library
 from(&#34;activemq:My.Queue&#34;). marshal().json(JsonLibrary.Fastjson). to(&#34;mqseries:Another.Queue&#34;);   Fastjson Options The JSon Fastjson dataformat supports 17 options which are listed below.
     Name Default Java Type Description     objectMapper
  String
 Lookup and use the existing ObjectMapper with the given id when using Jackson.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/json-gson-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/json-gson-dataformat/</guid>
      <description>JSon GSon DataFormat Available as of Camel version 2.10
 Gson is a Data Format which uses the Gson Library
 from(&#34;activemq:My.Queue&#34;). marshal().json(JsonLibrary.Gson). to(&#34;mqseries:Another.Queue&#34;);   Gson Options The JSon GSon dataformat supports 17 options which are listed below.
     Name Default Java Type Description     objectMapper
  String
 Lookup and use the existing ObjectMapper with the given id when using Jackson.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/json-jackson-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/json-jackson-dataformat/</guid>
      <description>JSon Jackson DataFormat Available as of Camel version 2.0
 Jackson is a Data Format which uses the Jackson Library
 from(&#34;activemq:My.Queue&#34;). marshal().json(JsonLibrary.Jackson). to(&#34;mqseries:Another.Queue&#34;);   Jackson Options The JSon Jackson dataformat supports 17 options which are listed below.
     Name Default Java Type Description     objectMapper
  String
 Lookup and use the existing ObjectMapper with the given id when using Jackson.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/json-johnzon-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/json-johnzon-dataformat/</guid>
      <description>JSon Johnzon DataFormat Available as of Camel version 2.18
 Johnzon is a Data Format which uses the Johnzon Library
 from(&#34;activemq:My.Queue&#34;). marshal().json(JsonLibrary.Johnzon). to(&#34;mqseries:Another.Queue&#34;);   Johnzon Options The JSon Johnzon dataformat supports 17 options which are listed below.
     Name Default Java Type Description     objectMapper
  String
 Lookup and use the existing ObjectMapper with the given id when using Jackson.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/json-xstream-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/json-xstream-dataformat/</guid>
      <description>JSon XStream DataFormat Available as of Camel version 2.0
 XStream is a Data Format which uses the XStream library to marshal and unmarshal Java objects to and from XML.
 To use XStream in your camel routes you need to add the a dependency on camel-xstream which implements this data format.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jsonpath-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jsonpath-language/</guid>
      <description>JSonPath Language Available as of Camel version 2.13
 Camel supports JSonPath to allow using Expression or Predicate on json messages.
 from(&#34;queue:books.new&#34;) .choice() .when().jsonpath(&#34;$.store.book[?(@.price &amp;lt; 10)]&#34;) .to(&#34;jms:queue:book.cheap&#34;) .when().jsonpath(&#34;$.store.book[?(@.price &amp;lt; 30)]&#34;) .to(&#34;jms:queue:book.average&#34;) .otherwise() .to(&#34;jms:queue:book.expensive&#34;)   JSonPath Options The JSonPath language supports 5 options which are listed below.
     Name Default Java Type Description     resultType
  String
 Sets the class name of the result type (type from output)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jt400-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jt400-component/</guid>
      <description>JT400 Component Available as of Camel version 1.5
 The jt400 component allows you to exchanges messages with an AS/400 system using data queues.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jt400&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format jt400://user:password@system/QSYS.LIB/LIBRARY.LIB/QUEUE.DTAQ[?options]   To call remote program (Camel 2.7)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/jxpath-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/jxpath-language/</guid>
      <description>JXPath Language (deprecated) Available as of Camel version 1.3
 Camel supports JXPath to allow XPath expressions to be used on beans in an Expression or Predicate to be used in the DSL or Xml Configuration. For example you could use JXPath to create an Predicate in a Message Filter or as an Expression for a Recipient List.
 You can use XPath expressions directly using smart completion in your IDE as follows</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kafka-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kafka-component/</guid>
      <description>Kafka Component Available as of Camel version 2.13
 The kafka: component is used for communicating with Apache Kafka message broker.
 Maven users will need to add the following dependency to their pom.xml for this component.
 From Camel 2.17 onwards Scala is no longer used, as we use the kafka java client.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-kafka&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format kafka:topic[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kestrel-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kestrel-component/</guid>
      <description>Kestrel Component (deprecated) Available as of Camel version 2.6
 The Kestrel component allows messages to be sent to a Kestrel queue, or messages to be consumed from a Kestrel queue. This component uses the spymemcached client for memcached protocol communication with Kestrel servers.
   Warning  The kestrel project is inactive and the Camel team regard this components as deprecated.     URI format kestrel://[addresslist/]queuename[?options]   Where queuename is the name of the queue on Kestrel.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/krati-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/krati-component/</guid>
      <description>Krati Component (deprecated) Available as of Camel version 2.9
 This component allows the use krati datastores and datasets inside Camel. Krati is a simple persistent data store with very low latency and high throughput. It is designed for easy integration with read-write-intensive applications with little effort in tuning configuration, performance and JVM garbage collection.
 Camel provides a producer and consumer for krati datastore_(key/value engine)_. It also provides an idempotent repository for filtering out duplicate messages.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-build-configs-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-build-configs-component/</guid>
      <description>Kubernetes Build Config Component Available as of Camel version 2.17
 The Kubernetes Build Config component is one of Kubernetes Components which provides a producer to execute kubernetes build config operations.
 Component Options The Kubernetes Build Config component has no options.
  Endpoint Options The Kubernetes Build Config endpoint is configured using URI syntax:
 kubernetes-build-configs:masterUrl   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     masterUrl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-builds-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-builds-component/</guid>
      <description>Kubernetes Builds Component Available as of Camel version 2.17
 The Kubernetes Builds component is one of Kubernetes Components which provides a producer to execute kubernetes build operations.
 Component Options The Kubernetes Builds component has no options.
  Endpoint Options The Kubernetes Builds endpoint is configured using URI syntax:
 kubernetes-builds:masterUrl   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     masterUrl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-component/</guid>
      <description>Kubernetes Component (deprecated) Available as of Camel version 2.17
   Important  The composite kubernetes component has been deprecated. Use individual component splitted as following.
   Kubernetes Components
  Kubernetes Build Config
  Kubernetes Build
  Kubernetes ConfigMap
  Kubernetes Namespace
  Kubernetes Node
  Kubernetes Persistent Volume
  Kubernetes Persistent Volume Claim
  Kubernetes Pod
  Kubernetes Replication Controller</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-config-maps-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-config-maps-component/</guid>
      <description>Kubernetes ConfigMap Component Available as of Camel version 2.17
 The Kubernetes ConfigMap component is one of Kubernetes Components which provides a producer to execute kubernetes ConfigMap operations.
 Component Options The Kubernetes ConfigMap component has no options.
  Endpoint Options The Kubernetes ConfigMap endpoint is configured using URI syntax:
 kubernetes-config-maps:masterUrl   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     masterUrl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-namespaces-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-namespaces-component/</guid>
      <description>Kubernetes Namespaces Component Available as of Camel version 2.17
 The Kubernetes Namespaces component is one of Kubernetes Components which provides a producer to execute kubernetes namespace operations and a consumer to consume kubernetes namespace events.
 Component Options The Kubernetes Namespaces component has no options.
  Endpoint Options The Kubernetes Namespaces endpoint is configured using URI syntax:
 kubernetes-namespaces:masterUrl   with the following path and query parameters:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-nodes-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-nodes-component/</guid>
      <description>Kubernetes Nodes Component Available as of Camel version 2.17
 The Kubernetes Nodes component is one of Kubernetes Components which provides a producer to execute kubernetes node operations and a consumer to consume kubernetes node events.
 Component Options The Kubernetes Nodes component has no options.
  Endpoint Options The Kubernetes Nodes endpoint is configured using URI syntax:
 kubernetes-nodes:masterUrl   with the following path and query parameters:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-persistent-volumes-claims-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-persistent-volumes-claims-component/</guid>
      <description>Kubernetes Persistent Volume Claim Component Available as of Camel version 2.17
 The Kubernetes Persistent Volume Claim component is one of Kubernetes Components which provides a producer to execute kubernetes persistent volume claim operations.
 Component Options The Kubernetes Persistent Volume Claim component has no options.
  Endpoint Options The Kubernetes Persistent Volume Claim endpoint is configured using URI syntax:
 kubernetes-persistent-volumes-claims:masterUrl   with the following path and query parameters:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-persistent-volumes-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-persistent-volumes-component/</guid>
      <description>Kubernetes Persistent Volume Component Available as of Camel version 2.17
 The Kubernetes Persistent Volume component is one of Kubernetes Components which provides a producer to execute kubernetes persistent volume operations.
 Component Options The Kubernetes Persistent Volume component has no options.
  Endpoint Options The Kubernetes Persistent Volume endpoint is configured using URI syntax:
 kubernetes-persistent-volumes:masterUrl   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     masterUrl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-pods-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-pods-component/</guid>
      <description>Kubernetes Pods Component Available as of Camel version 2.17
 The Kubernetes Pods component is one of Kubernetes Components which provides a producer to execute kubernetes pod operations.
 Component Options The Kubernetes Pods component has no options.
  Endpoint Options The Kubernetes Pods endpoint is configured using URI syntax:
 kubernetes-pods:masterUrl   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     masterUrl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-replication-controllers-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-replication-controllers-component/</guid>
      <description>Kubernetes Replication Controller Component Available as of Camel version 2.17
 The Kubernetes Replication Controller component is one of Kubernetes Components which provides a producer to execute kubernetes replication controller operations and a consumer to consume kubernetes replication controller events.
 Component Options The Kubernetes Replication Controller component has no options.
  Endpoint Options The Kubernetes Replication Controller endpoint is configured using URI syntax:
 kubernetes-replication-controllers:masterUrl   with the following path and query parameters:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-resources-quota-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-resources-quota-component/</guid>
      <description>Kubernetes Resources Quota Component Available as of Camel version 2.17
 The Kubernetes Resources Quota component is one of Kubernetes Components which provides a producer to execute kubernetes resource quota operations.
 Component Options The Kubernetes Resources Quota component has no options.
  Endpoint Options The Kubernetes Resources Quota endpoint is configured using URI syntax:
 kubernetes-resources-quota:masterUrl   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     masterUrl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-secrets-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-secrets-component/</guid>
      <description>Kubernetes Secrets Component Available as of Camel version 2.17
 The Kubernetes Secrets component is one of Kubernetes Components which provides a producer to execute kubernetes secret operations.
 Component Options The Kubernetes Secrets component has no options.
  Endpoint Options The Kubernetes Secrets endpoint is configured using URI syntax:
 kubernetes-secrets:masterUrl   with the following path and query parameters:
 Path Parameters (1 parameters):     Name Description Default Type     masterUrl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes-services-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes-services-component/</guid>
      <description>Kubernetes Services Component Available as of Camel version 2.17
 The Kubernetes Services component is one of Kubernetes Components which provides a producer to execute kubernetes service operations and a consumer to consume kubernetes service events.
 Component Options The Kubernetes Services component has no options.
  Endpoint Options The Kubernetes Services endpoint is configured using URI syntax:
 kubernetes-services:masterUrl   with the following path and query parameters:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kubernetes/</guid>
      <description>Kubernetes Components Available as of Camel version 2.17
 The Kubernetes components integrate your application with Kubernetes standalone or on top of Openshift.
 The camel-kubernetes consists of 13 components:
   Kubernetes ConfigMap
  Kubernetes Namespace
  Kubernetes Node
  Kubernetes Persistent Volume
  Kubernetes Persistent Volume Claim
  Kubernetes Pod
  Kubernetes Replication Controller
  Kubernetes Resource Quota
  Kubernetes Secrets</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/kura/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/kura/</guid>
      <description>Eclipse Kura component Available as of Camel 2.15
 This documentation page covers the integration options of Camel with the Eclipse Kura M2M gateway. The common reason to deploy Camel routes into the Eclipse Kura is to provide enterprise integration patterns and Camel components to the messaging M2M gateway. For example you might want to install Kura on Raspberry PI, then read temperature from the sensor attached to that Raspberry PI using Kura services and finally forward the current temperature value to your data center service using Camel EIP and components.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ldap-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ldap-component/</guid>
      <description>LDAP Component Available as of Camel version 1.5
 The ldap component allows you to perform searches in LDAP servers using filters as the message payload.
This component uses standard JNDI (javax.naming package) to access the server.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ldap&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format ldap:ldapServerBean[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/leveldb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/leveldb/</guid>
      <description>LevelDB Available as of Camel 2.10
 Leveldb is a very lightweight and embedable key value database. It allows together with Camel to provide persistent support for various Camel features such as Aggregator.
 Current features it provides:
   LevelDBAggregationRepository
   Using LevelDBAggregationRepository LevelDBAggregationRepository is an AggregationRepository which on the fly persists the aggregated messages. This ensures that you will not loose messages, as the default aggregator will use an in memory only AggregationRepository.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/linkedin-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/linkedin-component/</guid>
      <description>Linkedin Component Available as of Camel version 2.14
 The LinkedIn component provides access to all of LinkedIn REST APIs documented at https://developer.linkedin.com/rest[https://developer.linkedin.com/rest].
 LinkedIn uses OAuth2.0 for all client application authentication. In order to use camel-linkedin with your account, you&amp;#8217;ll need to create a new application for LinkedIn at https://www.linkedin.com/secure/developer. The LinkedIn application&amp;#8217;s client id and secret will allow access to LinkedIn REST APIs which require a current user. A user access token is generated and managed by component for an end user.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/lpr-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/lpr-component/</guid>
      <description>Printer Component Available as of Camel version 2.1
 The printer component provides a way to direct payloads on a route to a printer. Obviously the payload has to be a formatted piece of payload in order for the component to appropriately print it. The objective is to be able to direct specific payloads as jobs to a line printer in a camel flow.
 This component only supports a camel producer endpoint.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/lucene-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/lucene-component/</guid>
      <description>Lucene Component Available as of Camel version 2.2
 The lucene component is based on the Apache Lucene project. Apache Lucene is a powerful high-performance, full-featured text search engine library written entirely in Java. For more details about Lucene, please see the following links
   http://lucene.apache.org/java/docs/
  http://lucene.apache.org/java/docs/features.html
   The lucene component in camel facilitates integration and utilization of Lucene endpoints in enterprise integration patterns and scenarios.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/lumberjack-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/lumberjack-component/</guid>
      <description>Lumberjack Component Available as of Camel version 2.18
 The Lumberjack component retrieves logs sent over the network using the Lumberjack protocol, from Filebeat for instance. The network communication can be secured with SSL.
 This component only supports consumer endpoints.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-lumberjack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format lumberjack:host lumberjack:host:port   You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/lzf-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/lzf-dataformat/</guid>
      <description>LZF Deflate Compression DataFormat Available as of Camel version 2.17
 The LZF https://cwiki.apache.org/confluence/display/CAMEL/Data+Format[Data Format] is a message compression and de-compression format. It uses the LZF deflate algorithm. Messages marshalled using LZF compression can be unmarshalled using LZF decompression just prior to being consumed at the endpoint. The compression capability is quite useful when you deal with large XML and Text based payloads or when you read messages previously comressed using LZF algotithm.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mail-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mail-component/</guid>
      <description>Mail Component Available as of Camel version 1.0
 The mail component provides access to Email via Spring&amp;#8217;s Mail support and the underlying JavaMail system.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-mail&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;     Warning  Geronimo mail .jar     We have discovered that the geronimo mail .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/metrics-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/metrics-component/</guid>
      <description>Metrics Component Metrics Component The metrics: component allows to collect various metrics directly from Camel routes. Supported metric types are counter, histogram, meter, timer and gauge. http://metrics.dropwizard.io[Metrics] provides simple way to measure behaviour of application. Configurable reporting backend is enabling different integration options for collecting and visualizing statistics. The component also provides a MetricsRoutePolicyFactory which allows to expose route statistics using Dropwizard Metrics, see bottom of page for details.
 Maven users will need to add the following dependency to their pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/milo-client-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/milo-client-component/</guid>
      <description>OPC UA Client Component Available as of Camel version 2.19
 The Milo Client component provides access to OPC UA servers using the Eclipse Milo™ implementation.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-milo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   The OPC UA Client component supports 6 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/milo-server-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/milo-server-component/</guid>
      <description>OPC UA Server Component Available as of Camel version 2.19
 The Milo Server component provides an OPC UA server using the Eclipse Milo™ implementation.
 Java 8: This component requires Java 8 at runtime.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-milo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Messages sent to the endpoint from Camel will be available from the OPC UA server to OPC UA Clients.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mime-multipart-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mime-multipart-dataformat/</guid>
      <description>MIME Multipart DataFormat Available as of Camel version 2.17
 This data format that can convert a Camel message with attachments into a Camel message having a MIME-Multipart message as message body (and no attachments).
 The use case for this is to enable the user to send attachments over endpoints that do not directly support attachments, either as special protocol implementation (e.g. send a MIME-multipart over an HTTP endpoint) or as a kind of tunneling solution (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mina-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mina-component/</guid>
      <description>Mina Component (deprecated) Available as of Camel version 1.0
 Deprecated
   Warning  This component is deprecated as the Apache Mina 1.x project is EOL. Instead use MINA2 or Netty instead.     The mina: component is a transport for working with Apache MINA
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-mina&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mina2-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mina2-component/</guid>
      <description>Mina2 Component Available as of Camel version 2.10
 The mina2: component is a transport for working with Apache MINA 2.x
   Tip  Favor using Netty as Netty is a much more active maintained and popular project than Apache Mina currently is     INFO: Be careful with sync=false on consumer endpoints. Since camel-mina2 all consumer exchanges are InOut. This is different to camel-mina.
 Maven users will need to add the following dependency to their pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mllp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mllp-component/</guid>
      <description>MLLP Component Available as of Camel version 2.17
 The MLLP component is specifically designed to handle the nuances of the MLLP protocol and provide the functionality required by Healthcare providers to communicate with other systems using the MLLP protocol. The MLLP component provides a simple configuration URI, automated HL7 acknowledgment generation and automatic acknowledgement interrogation.
 The MLLP protocol does not typically use a large number of concurrent TCP connections - a single active TCP connection is the normal case.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mongodb-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mongodb-component/</guid>
      <description>MongoDB Component Available as of Camel version 2.10
 According to Wikipedia: &#34;NoSQL is a movement promoting a loosely defined class of non-relational data stores that break with a long history of relational databases and ACID guarantees.&#34; NoSQL solutions have grown in popularity in the last few years, and major extremely-used sites and services such as Facebook, LinkedIn, Twitter, etc. are known to use them extensively to achieve scalability and agility.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mongodb-gridfs-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mongodb-gridfs-component/</guid>
      <description>MongoDB GridFS Component Available as of Camel version 2.18
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-mongodb-gridfs&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.y.z&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format mongodb-gridfs:connectionBean?database=databaseName&amp;amp;bucket=bucketName[&amp;amp;moreOptions...]    MongoDB GridFS options The MongoDB GridFS component has no options.
 The MongoDB GridFS endpoint is configured using URI syntax:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mongodb3-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mongodb3-component/</guid>
      <description>MongoDB Component Available as of Camel version 2.19
 Note: Camel MongoDB3 component Use the Mongo Driver for Java 3.4. If your are looking for previews versions look the Camel MongoDB component
 According to Wikipedia: &#34;NoSQL is a movement promoting a loosely defined class of non-relational data stores that break with a long history of relational databases and ACID guarantees.&#34; NoSQL solutions have grown in popularity in the last few years, and major extremely-used sites and services such as Facebook, LinkedIn, Twitter, etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mqtt-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mqtt-component/</guid>
      <description>MQTT Component Available as of Camel version 2.10
 The mqtt: component is used for communicating with MQTT compliant message brokers, like Apache ActiveMQ or Mosquitto
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-mqtt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format mqtt://name[?options]   Where name is the name you want to assign the component.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/msv-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/msv-component/</guid>
      <description>MSV Component Available as of Camel version 1.1
 The MSV component performs XML validation of the message body using the MSV Library and any of the supported XML schema languages, such as XML Schema or RelaxNG XML Syntax.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-msv&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Note that the Jing component also supports RelaxNG Compact Syntax</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mustache-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mustache-component/</guid>
      <description>Mustache Component Available as of Camel version 2.12
 The mustache: component allows for processing a message using a Mustache template. This can be ideal when using Templating to generate responses for requests.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-mustache&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format mustache:templateName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mvel-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mvel-component/</guid>
      <description>MVEL Component Available as of Camel version 2.12
 The mvel: component allows you to process a message using an MVEL template. This can be ideal when using Templating to generate responses for requests.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-mvel&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format mvel:templateName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mvel-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mvel-language/</guid>
      <description>MVEL Language Available as of Camel version 2.0
 Camel allows Mvel to be used as an Expression or Predicate the DSL or Xml Configuration.
 You could use Mvel to create an Predicate in a Message Filter or as an Expression for a Recipient List
 You can use Mvel dot notation to invoke operations. If you for instance have a body that contains a POJO that has a getFamiliyName method then you can construct the syntax as follows:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/mybatis-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/mybatis-component/</guid>
      <description>MyBatis Component Available as of Camel version 2.7
 The mybatis: component allows you to query, poll, insert, update and delete data in a relational database using MyBatis.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format mybatis:statementName[?options]   Where statementName is the statement name in the MyBatis XML mapping file which maps to the query, insert, update or delete operation you wish to evaluate.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/nagios-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/nagios-component/</guid>
      <description>Nagios Component Available as of Camel version 2.3
 The Nagios component allows you to send passive checks to Nagios.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-nagios&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format nagios://host[:port][?Options]   Camel provides two abilities with the Nagios component. You can send passive check messages by sending a message to its endpoint.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/nats-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/nats-component/</guid>
      <description>Nats Component Available as of Camel version 2.17
 NATS is a fast and reliable messaging platform.
 Maven users will need to add the following dependency to their pom.xml for this component.
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-nats&amp;lt;/artifactId&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;version&amp;gt;x.y.z&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format nats:servers[?options]   Where servers represents the list of NATS servers.
  Options The Nats component supports 2 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/netty-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/netty-component/</guid>
      <description>Netty Component (deprecated) Available as of Camel version 2.3
   Warning  This component is deprecated. You should use Netty4.     The netty component in Camel is a socket communication component, based on the Netty project.
 Netty is a NIO client server framework which enables quick and easy development of network applications such as protocol servers and clients.
Netty greatly simplifies and streamlines network programming such as TCP and UDP socket server.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/netty-http-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/netty-http-component/</guid>
      <description>Netty HTTP Component (deprecated) Available as of Camel version 2.12
 The netty-http component is an extension to Netty component to facilitiate HTTP transport with Netty.
 This camel component supports both producer and consumer endpoints.
   Warning  This component is deprecated. You should use Netty4 HTTP.     INFO: Stream. Netty is stream based, which means the input it receives is submitted to Camel as a stream.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/netty4-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/netty4-component/</guid>
      <description>Netty4 Component Available as of Camel version 2.14
 The netty4 component in Camel is a socket communication component, based on the Netty project version 4.
Netty is a NIO client server framework which enables quick and easy development of netwServerInitializerFactoryork applications such as protocol servers and clients.
Netty greatly simplifies and streamlines network programming such as TCP and UDP socket server.
 This camel component supports both producer and consumer endpoints.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/netty4-http-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/netty4-http-component/</guid>
      <description>Netty4 HTTP Component Available as of Camel version 2.14
 The netty4-http component is an extension to Netty4 component to facilitiate HTTP transport with Netty4.
 This camel component supports both producer and consumer endpoints.
 INFO: Stream. Netty is stream based, which means the input it receives is submitted to Camel as a stream. That means you will only be able to read the content of the stream once. If you find a situation where the message body appears to be empty or you need to access the data multiple times (eg: doing multicasting, or redelivery error handling) you should use Stream caching or convert the message body to a String which is safe to be re-read multiple times.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ognl-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ognl-language/</guid>
      <description>OGNL Language Available as of Camel version 1.1
 Camel allows OGNL to be used as an Expression or Predicate the DSL or Xml Configuration.
 You could use OGNL to create an Predicate in a Message Filter or as an Expression for a Recipient List
 You can use OGNL dot notation to invoke operations. If you for instance have a body that contains a POJO that has a getFamilyName method then you can construct the syntax as follows:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/olingo2-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/olingo2-component/</guid>
      <description>Olingo2 Component Available as of Camel version 2.14
 The Olingo2 component utilizes http://olingo.apache.org/[Apache Olingo] version 2.0 APIs to interact with OData 2.0 compliant services. A number of popular commercial and enterprise vendors and products support the OData protocol. A sample list of supporting products can be found on the OData website.
 The Olingo2 component supports reading feeds, delta feeds, entities, simple and complex properties, links, counts, using custom and OData system query parameters.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/olingo4-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/olingo4-component/</guid>
      <description>Olingo4 Component Available as of Camel version 2.19
 The Olingo4 component utilizes http://olingo.apache.org/[Apache Olingo] version 4.0 APIs to interact with OData 4.0 compliant service. Since verison 4.0 OData is OASIS standard and number of popular opensource and commercial vendors and products support this protocol. A sample list of supporting products can be found on the OData website.
 The Olingo4 component supports reading entitiy sets, entities, simple and complex properties, counts, using custom and OData system query parameters.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openshift-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openshift-component/</guid>
      <description>OpenShift Component (deprecated) Available as of Camel version 2.14
 The openshift component is a component for managing your OpenShift applications.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openshift&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format openshift:clientId[?options]   You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openstack-cinder-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openstack-cinder-component/</guid>
      <description>OpenStack Cinder Component Available as of Camel version 2.19
 The openstack-cinder component allows messages to be sent to an OpenStack block storage services.
 Dependencies Maven users will need to add the following dependency to their pom.xml.
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openstack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel.
  URI Format openstack-cinder://hosturl[?options]   You can append query options to the URI in the following format ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openstack-glance-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openstack-glance-component/</guid>
      <description>OpenStack Glance Component Available as of Camel version 2.19
 The openstack-glance component allows messages to be sent to an OpenStack image services.
 Dependencies Maven users will need to add the following dependency to their pom.xml.
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openstack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel.
  URI Format openstack-glance://hosturl[?options]   You can append query options to the URI in the following format ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openstack-keystone-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openstack-keystone-component/</guid>
      <description>OpenStack Keystone Component Available as of Camel version 2.19
 The openstack-keystone component allows messages to be sent to an OpenStack identity services.
 The openstack-keystone component supports only Identity API v3!
 Dependencies Maven users will need to add the following dependency to their pom.xml.
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openstack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel.
  URI Format openstack-keystone://hosturl[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openstack-neutron-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openstack-neutron-component/</guid>
      <description>OpenStack Neutron Component Available as of Camel version 2.19
 The openstack-neutron component allows messages to be sent to an OpenStack network services.
 Dependencies Maven users will need to add the following dependency to their pom.xml.
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openstack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel.
  URI Format openstack-neutron://hosturl[?options]   You can append query options to the URI in the following format ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openstack-nova-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openstack-nova-component/</guid>
      <description>OpenStack Nova Component Available as of Camel version 2.19
 The openstack-nova component allows messages to be sent to an OpenStack compute services.
 Dependencies Maven users will need to add the following dependency to their pom.xml.
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openstack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel.
  URI Format openstack-nova://hosturl[?options]   You can append query options to the URI in the following format ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openstack-swift-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openstack-swift-component/</guid>
      <description>OpenStack Swift Component Available as of Camel version 2.19
 The openstack-swift component allows messages to be sent to an OpenStack object storage services.
 Dependencies Maven users will need to add the following dependency to their pom.xml.
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openstack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel.
  URI Format openstack-swift://hosturl[?options]   You can append query options to the URI in the following format ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/openstack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/openstack/</guid>
      <description>Openstack Component Available as of Camel 2.19
 The openstack component is a component for managing your OpenStack applications.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-openstack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;       OpenStack service Camel Component Description     OpenStack Cinder
 openstack-cinder</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/opentracing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/opentracing/</guid>
      <description>OpenTracing Component Available as of Camel 2.19
 The camel-opentracing component is used for tracing and timing incoming and outgoing Camel messages using OpenTracing.
 Events (spans) are captured for incoming and outgoing messages being sent to/from Camel.
 See the OpenTracing website for a list of supported tracers.
 Configuration There are three ways in which an OpenTracing tracer can be configured to provide distributed tracing for a Camel application:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/optaplanner-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/optaplanner-component/</guid>
      <description>OptaPlanner Component Available as of Camel version 2.13
 The optaplanner: component solves the planning problem contained in a message with OptaPlanner.
For example: feed it an unsolved Vehicle Routing problem and it solves it.
 The component supports consumer as BestSolutionChangedEvent listener and producer for processing Solution and ProblemFactChange
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-optaplanner&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/paho-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/paho-component/</guid>
      <description>Paho Component Available as of Camel version 2.16
 Paho component provides connector for the MQTT messaging protocol using the Eclipse Paho library. Paho is one of the most popular MQTT libraries, so if you would like to integrate it with your Java project - Camel Paho connector is a way to go.
 URI format paho:queueName[?options]   For example the following snippet reads messages from the MQTT broker installed on the same host as the Camel router:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/paxlogging-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/paxlogging-component/</guid>
      <description>OSGi PAX Logging Component Available as of Camel version 2.6
 The paxlogging component can be used in an OSGi environment to receive PaxLogging events and process them.
 Dependencies Maven users need to add the following dependency to their pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-paxlogging&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   where ${camel-version} must be replaced by the actual version of Camel (2.6.0 or higher).
  URI format paxlogging:appender[?options]   where appender is the name of the pax appender that need to be configured in the PaxLogging service configuration.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/pdf-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/pdf-component/</guid>
      <description>PDF Component Available as of Camel version 2.16
 The PDF: components provides the ability to create, modify or extract content from PDF documents. This component uses Apache PDFBox as underlying library to work with PDF documents.
 In order to use the PDF component, Maven users will need to add the following dependency to their pom.xml:
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-pdf&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format The PDF component only supports producer endpoints.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/pgevent-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/pgevent-component/</guid>
      <description>PostgresSQL Event Component Available as of Camel version 2.15
 This is a component for Apache Camel which allows for Producing/Consuming PostgreSQL events related to the LISTEN/NOTIFY commands added since PostgreSQL 8.3.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-pgevent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format
 The pgevent component uses the following two styles of endpoint URI notation:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/pgp-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/pgp-dataformat/</guid>
      <description>PGP DataFormat Available as of Camel version 2.9
 The PGP Data Format integrates the Java Cryptographic Extension into Camel, allowing simple and flexible encryption and decryption of messages using Camel&amp;#8217;s familiar marshall and unmarshal formatting mechanism. It assumes marshalling to mean encryption to cyphertext and unmarshalling to mean decryption back to the original plaintext. This data format implements only symmetric (shared-key) encryption and decyption.
 PGPDataFormat Options The PGP dataformat supports 15 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/php-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/php-language/</guid>
      <description>PHP Language (deprecated) Available as of Camel version 1.0
 Camel supports PHP among other Scripting Languages to allow an Expression or Predicate to be used in the DSL or Xml Configuration.
 To use a PHP expression use the following Java code
 ... php(&#34;somePHPExpression&#34;) ...   For example you could use the php function to create an Predicate in a Message Filter or as an Expression for a Recipient List</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/protobuf-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/protobuf-dataformat/</guid>
      <description>Protobuf DataFormat Available as of Camel version 2.2.0
   Protobuf - Protocol Buffers &#34;Protocol Buffers - Google&amp;#8217;s data interchange format&#34;
 Camel provides a Data Format to serialize between Java and the Protocol Buffer protocol. The project&amp;#8217;s site details why you may wish to choose this format over xml. Protocol Buffer is language-neutral and platform-neutral, so messages produced by your Camel routes may be consumed by other language implementations.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/pubnub-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/pubnub-component/</guid>
      <description>PubNub Component Available as of Camel version 2.19
 Camel PubNub component can be used to communicate with the PubNub data stream network for connected devices. This component uses pubnub java library.
 Use cases includs:
   Chat rooms: Sending and receiving messages
  Locations and Connected cars: dispatching taxi cabs
  Smart sensors: Receiving data from a sensor for data visualizations
  Health: Monitoring heart rate from a patient&amp;#8217;s wearable device</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/python-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/python-language/</guid>
      <description>Python Language (deprecated) Available as of Camel version 1.0
 Camel supports Python among other Scripting Languages to allow an Expression or Predicate to be used in the DSL or Xml Configuration.
 To use a Python expression use the following Java code
 ... python(&#34;somePythonExpression&#34;) ...   For example you could use the python function to create an Predicate in a Message Filter or as an Expression for a Recipient List</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/quartz-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/quartz-component/</guid>
      <description>Quartz Component (deprecated) Available as of Camel version 1.0
 The quartz: component provides a scheduled delivery of messages using the Quartz Scheduler 1.x. Each endpoint represents a different timer (in Quartz terms, a Trigger and JobDetail).
   Tip  If you are using Quartz 2.x then from Camel 2.12 onwards there is a Quartz2 component you should use     Maven users will need to add the following dependency to their pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/quartz2-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/quartz2-component/</guid>
      <description>Quartz2 Component Available as of Camel version 2.12
 The quartz2: component provides a scheduled delivery of messages using the Quartz Scheduler 2.x. Each endpoint represents a different timer (in Quartz terms, a Trigger and JobDetail).
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-quartz2&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   NOTE: Quartz 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/quickfix-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/quickfix-component/</guid>
      <description>QuickFix Component Available as of Camel version 2.1.0
 QuickFIX/J Component The quickfix component adapts the QuickFIX/J FIX engine for using in Camel . This component uses the standard Financial Interchange (FIX) protocol for message transport.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-quickfix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;    URI format quickfix:configFile[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/rabbitmq-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/rabbitmq-component/</guid>
      <description>RabbitMQ Component Available as of Camel version 2.12
 The rabbitmq: component allows you produce and consume messages from RabbitMQ instances. Using the RabbitMQ AMQP client, this component offers a pure RabbitMQ approach over the generic AMQP component.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-rabbitmq&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format rabbitmq://hostname[:port]/exchangeName?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/reactive-streams-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/reactive-streams-component/</guid>
      <description>Reactive Streams Component Available as of Camel version 2.19
 The reactive-streams: component allows you to exchange messages with reactive stream processing libraries compatible with the reactive streams standard.
 The component supports backpressure and has been tested using the reactive streams technology compatibility kit (TCK).
 The Camel module provides a reactive-streams component that allows users to define incoming and outgoing streams within Camel routes, and a direct client API that allows using Camel endpoints directly into any external reactive framework.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/reactor-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/reactor-component/</guid>
      <description>Reactor Component Available as of Camel version 2.20
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-reactor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/rest-swagger-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/rest-swagger-component/</guid>
      <description>REST Swagger Component Available as of Camel version 2.19
 The rest-swagger configures rest producers from Swagger (Open API) specification document and delegates to a component implementing the RestProducerFactory interface. Currently known working components are:
   http
  http4
  netty4-http
  restlet
  jetty
  undertow
   Maven users will need to add the following dependency to their pom.xml for this component:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/restlet-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/restlet-component/</guid>
      <description>Restlet Component Available as of Camel version 2.0
 The Restlet component provides Restlet based endpoints for consuming and producing RESTful resources.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-restlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format restlet:restletUrl[?options]   Format of restletUrl:
 protocol://hostname[:port][/resourcePattern]   Restlet promotes decoupling of protocol and application concerns.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ribbon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ribbon/</guid>
      <description>Ribbon Component Available as of Camel version 2.18
 The ribbon component provides use of Netflix Ribbon for client side load balancing.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   This component helps applying load balancing feature at the client side when using ServiceCall EIP.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/rmi-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/rmi-component/</guid>
      <description>RMI Component Available as of Camel version 1.0
 The rmi: component binds Exchanges to the RMI protocol (JRMP).
 Since this binding is just using RMI, normal RMI rules still apply regarding what methods can be invoked. This component supports only Exchanges that carry a method invocation from an interface that extends the Remote interface. All parameters in the method should be either Serializable or Remote objects.
 Maven users will need to add the following dependency to their pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/routebox-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/routebox-component/</guid>
      <description>RouteBox Component (deprecated) Available as of Camel version 2.6
 Routebox subject for change
 The Routebox component will be revisited in upcoming releases to see if it can be further simplified, be more intuitive and user friendly. The related Context component may be regardes as the simpler component. This component may be @deprecated in favor of Context.
 The routebox component enables the creation of specialized endpoints that offer encapsulation and a strategy based indirection service to a collection of camel routes hosted in an automatically created or user injected camel context.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/rss-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/rss-component/</guid>
      <description>RSS Component Available as of Camel version 2.0
 The rss: component is used for polling RSS feeds. Camel will default poll the feed every 60th seconds.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-rss&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   Note: The component currently only supports polling (consuming) feeds.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/rss-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/rss-dataformat/</guid>
      <description>RSS DataFormat Available as of Camel version 2.1
 The RSS component ships with an RSS dataformat that can be used to convert between String (as XML) and ROME RSS model objects.
   marshal = from ROME SyndFeed to XML String
  unmarshal = from XML String to ROME SyndFeed
   A route using this would look something like this:
 The purpose of this feature is to make it possible to use Camel&amp;#8217;s lovely built-in expressions for manipulating RSS messages.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ruby-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ruby-language/</guid>
      <description>Ruby Language (deprecated) Available as of Camel version 1.0
 Camel supports Ruby among other Scripting Languages to allow an Expression or Predicate to be used in the DSL or Xml Configuration.
 To use a Ruby expression use the following Java code
 ... ruby(&#34;someRubyExpression&#34;) ...   For example you could use the ruby function to create an Predicate in a Message Filter or as an Expression for a Recipient List</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ruby/</guid>
      <description>Ruby Camel supports Ruby among other Scripting Languages to allow an Expression or Predicate to be used in the DSL or Xml Configuration.
 To use a Ruby expression use the following Java code
 ... ruby(&#34;someRubyExpression&#34;) ...   For example you could use the ruby function to create an Predicate in a Message Filter or as an Expression for a Recipient List
 Example In the sample below we use Ruby to create a Predicate use in the route path, to route exchanges from admin users to a special queue.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/rx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/rx/</guid>
      <description>Camel RX (deprecated) Available as of Camel 2.11
 This component is deprecated. We suggest to use the newer camel-reactive-streams component.
 The camel-rx library provides Camel support for the Reactive Extensions (RX) using the RxJava library so that:
   Camel users can use the RxJava API for processing messages on endpoints using a typesafe composable API
  RxJava users get to use all of the Camel transports and protocols from within the RxJava API</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/salesforce-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/salesforce-component/</guid>
      <description>Salesforce Component Available as of Camel version 2.12
 This component supports producer and consumer endpoints to communicate with Salesforce using Java DTOs. There is a companion maven plugin Camel Salesforce Plugin that generates these DTOs (see further below).
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-salesforce&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;     Note  Developers wishing to contribute to the component are instructed to look at the README.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sap-netweaver-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sap-netweaver-component/</guid>
      <description>SAP NetWeaver Component Available as of Camel version 2.12
 The sap-netweaver integrates with the SAP NetWeaver Gateway using HTTP transports.
 This camel component supports only producer endpoints.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-sap-netweaver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format The URI scheme for a sap netweaver gateway component is as follows</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/scala-eip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/scala-eip/</guid>
      <description>Scala Supported DSL The Scala DSL supports every DSL from the Java DSL.
 On this page we have examples for a number of the EIPs.
You can check the unit test source code for the Scala Component to find more examples.
   1 Messaging systems
  1.1 Pipeline
  1.2 Filter
     2 Messaging channels
  2.1 Dead letter channel</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/scala-getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/scala-getting-started/</guid>
      <description>Scala DSL Getting Started Just like the Java DSL, the Scala DSL has a RouteBuilder class (org.apache.camel.scala.dsl.builder.RouteBuilder) that you can extend to implement your own routes. This example shows two very simple routes:
 INFO: From Camel 2.15 onwards use org.apache.camel.scala.dsl.builder.ScalaRouteBuilder and pass in the CamelContext in the constructor, which will be used by the builder. The old class RouteBuilder is deprecated.
 If you compare this to the Java DSL, you notice:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/scala-supported-languages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/scala-supported-languages/</guid>
      <description>Scala DSL Supported Languages Support for other languages inside the Scala DSL routes is delivered through traits. The org.apache.camel.scala.dsl.languages package currently offers traits to support XPath. To use any given language, you can mix-in the trait when creating your RouteBuilder.
 You can use any of the supported Camel Languages in the Scala DSL; see below for a couple of examples:
 Using XPath With the XPath trait, you have an additional method available on an Exchange to do XPath queries against the message.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/scala/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/scala/</guid>
      <description>About the Scala DSL Deprecated
 Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way. It integrates very well with the Java platform. Our Scala DSL implementation is built on top of the existing Java-based DSL, but it adds Scala syntax sugar to make building routes even more convenient.
  Documentation   Scala DSL - Getting Started gives you basic information on how to use the Scala DSL.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/schematron-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/schematron-component/</guid>
      <description>Schematron Component Available as of Camel version 2.15
 Schematron is an XML-based language for validating XML instance documents. It is used to make assertions about data in an XML document and it is also used to express operational and business rules. Schematron is an http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html[ISO Standard]. The schematron component uses the leading implementation of ISO schematron. It is an XSLT based implementation. The schematron rules is run through four XSLT pipelines, which generates a final XSLT which will be used as the basis for running the assertion against the XML document.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/scp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/scp-component/</guid>
      <description>SCP Component Available as of Camel version 2.10
 The camel-jsch component supports the SCP protocol using the Client API of the Jsch project. Jsch is already used in camel by the FTP component for the sftp: protocol.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-jsch&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format scp://host[:port]/destination[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/scr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/scr/</guid>
      <description>Camel SCR (deprecated) Available as of Camel 2.15
 SCR stands for Service Component Runtime and is an implementation of OSGi Declarative Services specification. SCR enables any plain old Java object to expose and use OSGi services with no boilerplate code.
 OSGi framework knows your object by looking at SCR descriptor files in its bundle which are typically generated from Java annotations by a plugin such as org.apache.felix:maven-scr-plugin.
 Running Camel in an SCR bundle is a great alternative for Spring DM and Blueprint based solutions having significantly fewer lines of code between you and the OSGi framework.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/script/</guid>
      <description>Script Available as of Camel 2.16
 Is used to execute a script which does not change the message (by default). This is useful when you need to invoke some logic that are not in Java code such as JavaScript, Groovy or any of the other Languages. The message body is not changed (by default) however the scripting context has access to the current Exchange and can essentially change the message or headers directly.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/securexml-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/securexml-dataformat/</guid>
      <description>XML Security DataFormat Available as of Camel version 2.0
 The XMLSecurity Data Format facilitates encryption and decryption of XML payloads at the Document, Element, and Element Content levels (including simultaneous multi-node encryption/decryption using XPath). To sign messages using the XML Signature specification, please see the Camel XML Security component.
 The encryption capability is based on formats supported using the Apache XML Security (Santuario) project. Symmetric encryption/decryption is currently supported using Triple-DES and AES (128, 192, and 256) encryption formats.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/servicenow-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/servicenow-component/</guid>
      <description>ServiceNow Component Available as of Camel version 2.18
 The ServiceNow component provides access to ServiceNow platform through their REST API.
   Note  From Camel 2.18.1 the component supports multiple version of ServiceNow platform with default to Helsinki. Supported version are API Mapping and API Mapping     Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/servlet-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/servlet-component/</guid>
      <description>Servlet Component Available as of Camel version 2.0
 The servlet: component provides HTTP based endpoints for consuming HTTP requests that arrive at a HTTP endpoint that is bound to a published Servlet.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;\!-\- use the same version as your Camel core version \--&amp;gt; &amp;lt;/dependency&amp;gt;   INFO: Stream. Servlet is stream based, which means the input it receives is submitted to Camel as a stream.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/servletlistener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/servletlistener/</guid>
      <description>ServletListener Component Available as of Camel 2.11
 This component is used for bootstrapping Camel applications in web applications. For example beforehand people would have to find their own way of bootstrapping Camel, or rely on 3rd party frameworks such as Spring to do it.
   Note  Sidebar This component supports Servlet 2.x onwards, which mean it works also in older web containers; which is the goal of this component.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sftp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sftp-component/</guid>
      <description>SFTP Component Available as of Camel version 1.1
 This component provides access to remote file systems over the FTP and SFTP protocols.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ftp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   For more information you can look at FTP component
 URI Options The options below are exclusive for the FTPS component.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/shiro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/shiro/</guid>
      <description>Shiro Security Component Available as of Camel 2.5
 The shiro-security component in Camel is a security focused component, based on the Apache Shiro security project.
 Apache Shiro is a powerful and flexible open-source security framework that cleanly handles authentication, authorization, enterprise session management and cryptography. The objective of the Apache Shiro project is to provide the most robust and comprehensive application security framework available while also being very easy to understand and extremely simple to use.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sip-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sip-component/</guid>
      <description>SIP Component Available as of Camel version 2.5
 The sip component in Camel is a communication component, based on the Jain SIP implementation (available under the JCP license).
 Session Initiation Protocol (SIP) is an IETF-defined signaling protocol, widely used for controlling multimedia communication sessions such as voice and video calls over Internet Protocol (IP).The SIP protocol is an Application Layer protocol designed to be independent of the underlying transport layer; it can run on Transmission Control Protocol (TCP), User Datagram Protocol (UDP) or Stream Control Transmission Protocol (SCTP).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sjms-batch-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sjms-batch-component/</guid>
      <description>Simple JMS Batch Component Available as of Camel version 2.16
 SJMS Batch is a specialized component for highly performant, transactional batch consumption from a JMS queue. It can be thought of as a hybrid of a consumer-only component and an aggregator.
 A common use case in Camel is to consume messages from a queue and aggregate them before sending the aggregated state to another endpoint. In order to ensure that data is not lost if the system performing the processing fails, it is typically consumed within a transaction from the queue, and once aggregated stored in a persistent AggregationRepository, such as the one found in the JDBC Component.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sjms-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sjms-component/</guid>
      <description>Simple JMS Component Available as of Camel version 2.11
 The Simple JMS Component, or SJMS, is a JMS client for use with Camel that uses well known best practices when it comes to JMS client creation and configuration. SJMS contains a brand new JMS client API written explicitly for Camel eliminating third party messaging implementations keeping it light and resilient. The following features is included:
   Standard Queue and Topic Support (Durable &amp;amp; Non-Durable)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sjms2-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sjms2-component/</guid>
      <description>Simple JMS2 Component Available as of Camel version 2.19
 The Simple JMS 2.0 Component, or SJMS2, is a JMS client for use with Camel that uses well known best practices when it comes to JMS client creation and configuration. SJMS2 contains a brand new JMS 2.0 client API written explicitly for Camel eliminating third party messaging implementations keeping it light and resilient. The following features is included:
   Standard Queue and Topic Support (Durable &amp;amp; Non-Durable)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/slack-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/slack-component/</guid>
      <description>Slack Component Available as of Camel version 2.16
 The slack component allows you to connect to an instance of http://www.slack.com/[Slack] and delivers a message contained in the message body via a pre established https://api.slack.com/incoming-webhooks[Slack incoming webhook].
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-slack&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format To send a message to a channel.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/smpp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/smpp-component/</guid>
      <description>SMPP Component Available as of Camel version 2.2
 This component provides access to an SMSC (Short Message Service Center) over the SMPP protocol to send and receive SMS. The JSMPP library is used for the protocol implementation.
 The Camel component currently operates as an ESME (External Short Messaging Entity) and not as an SMSC itself.
 Starting with*Camel 2.9* you are also able to execute ReplaceSm, QuerySm, SubmitMulti, CancelSm and DataSm.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/snmp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/snmp-component/</guid>
      <description>SNMP Component Available as of Camel version 2.1
 The snmp: component gives you the ability to poll SNMP capable devices or receiving traps
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-snmp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format snmp://hostname[:port][?Options]   The component supports polling OID values from an SNMP enabled device and receiving traps.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/soapjaxb-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/soapjaxb-dataformat/</guid>
      <description>SOAP DataFormat Available as of Camel version 2.3
 SOAP is a Data Format which uses JAXB2 and JAX-WS annotations to marshal and unmarshal SOAP payloads. It provides the basic features of Apache CXF without need for the CXF Stack.
 Supported SOAP versions
 SOAP 1.1 is supported by default. SOAP 1.2 is supported from Camel 2.11 onwards.
 Namespace prefix mapping
 See JAXB for details how you can control namespace prefix mappings when marshalling using SOAP data format.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/solr-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/solr-component/</guid>
      <description>Solr Component Available as of Camel version 2.9
 The Solr component allows you to interface with an Apache Lucene Solr server (based on SolrJ 3.5.0).
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-solr&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format NOTE: solrs and solrCloud are new added since Camel 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spark-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spark-component/</guid>
      <description>Apache Spark Component Available as of Camel version 2.17
 This documentation page covers the Apache Spark component for the Apache Camel. The main purpose of the Spark integration with Camel is to provide a bridge between Camel connectors and Spark tasks. In particular Camel connector provides a way to route message from various transports, dynamically choose a task to execute, use incoming message as input data for that task and finally deliver the results of the execution back to the Camel pipeline.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spark-rest-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spark-rest-component/</guid>
      <description>Spark Rest Component Available as of Camel version 2.14
 The Spark-rest component allows to define REST endpoints using the Spark REST Java library using the Rest DSL.
 INFO: Spark Java requires Java 8 runtime.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-spark-rest&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format spark-rest://verb:path?[options]    URI Options The Spark Rest component supports 12 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spel-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spel-language/</guid>
      <description>SpEL Language Available as of Camel version 2.7
 Camel allows SpEL to be used as an Expression or Predicate in the DSL or Xml Configuration.
 Variables The following variables are available in expressions and predicates written in SpEL:
     Variable Type Description     this
 Exchange
 the Exchange is the root object
   exchange
 Exchange
 the Exchange object</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/splunk-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/splunk-component/</guid>
      <description>Splunk Component Available as of Camel version 2.13
 The Splunk component provides access to Splunk using the Splunk provided client api, and it enables you to publish and search for events in Splunk.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-splunk&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   URI format splunk://[endpoint]?[options]    Producer Endpoints:     Endpoint Description     stream</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-batch-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-batch-component/</guid>
      <description>Spring Batch Component Available as of Camel version 2.10
 The spring-batch: component and support classes provide integration bridge between Camel and Spring Batch infrastructure.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-spring-batch&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format spring-batch:jobName[?options]   Where jobName represents the name of the Spring Batch job located in the Camel registry.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-boot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-boot/</guid>
      <description>Spring Boot Available as of Camel 2.15
 Spring Boot component provides auto-configuration for Apache Camel. Our opinionated auto-configuration of the Camel context auto-detects Camel routes available in the Spring context and registers the key Camel utilities (like producer template, consumer template and the type converter) as beans.
 Maven users will need to add the following dependency to their pom.xml in order to use this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-spring-boot&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-cloud-netflix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-cloud-netflix/</guid>
      <description>Spring Cloud Netflix Available as of Camel 2.19
 The Spring Cloud Netflix component bridges Camel Cloud and Spring Cloud Netflix so you can leverage Spring Cloud Netflix service discovery and load balance features in Camel and/or you can use Camel Service Discovery implementations as ServerList source for Spring Cloud Netflix&amp;#8217;s Ribbon load balabncer.
 Maven users will need to add the following dependency to their pom.xml in order to use this component:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-cloud/</guid>
      <description>Spring Cloud Available as of Camel 2.19
 Spring Cloud component
 Maven users will need to add the following dependency to their pom.xml in order to use this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-spring-cloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel.version}&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   camel-spring-cloud jar comes with the spring.factories file, so as soon as you add that dependency into your classpath, Spring Boot will automatically auto-configure Camel for you.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-dm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-dm/</guid>
      <description>Spring DM (deprecated) Spring Dynamic Modules for OSGi allows to use Spring XML files in OSGi containers such as Apache Karaf.
 However Spring DM is EOL and its highly recommended not to use. Use OSGi Blueprint instead which you can find in the camel-blueprint component.
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-event-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-event-component/</guid>
      <description>Spring Event Component Available as of Camel version 1.4
 The spring-event: component provides access to the Spring ApplicationEvent objects. This allows you to publish ApplicationEvent objects to a Spring ApplicationContext or to consume them. You can then use Enterprise Integration Patterns to process them such as Message Filter.
 URI format spring-event://default[?options]   Note, at the moment there are no options for this component. That can easily change in future releases, so please check back.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-integration-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-integration-component/</guid>
      <description>Spring Integration Component Available as of Camel version 1.4
 The spring-integration: component provides a bridge for Camel components to talk to spring integration endpoints.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-spring-integration&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format spring-integration:defaultChannelName[?options]   Where defaultChannelName represents the default channel name which is used by the Spring Integration Spring context.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-javaconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-javaconfig/</guid>
      <description>Spring Java Config Spring started life using XML Config to wire beans together. However some folks don&amp;#8217;t like using XML and would rather use Java code which led to the creation of Guice along with the Spring JavaConfig project.
 You can use either the XML or Java config approaches with Camel; its your choice really on which you prefer.
 Using Spring Java Config To use Spring Java Config in your Camel project the easiest thing to do is add the following to your pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-ldap-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-ldap-component/</guid>
      <description>Spring LDAP Component Available as of Camel version 2.11
 The spring-ldap: component provides a Camel wrapper for Spring LDAP.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-spring-ldap&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format spring-ldap:springLdapTemplate[?options]   Where springLdapTemplate is the name of the Spring LDAP Template bean.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-redis-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-redis-component/</guid>
      <description>Spring Redis Component Available as of Camel version 2.11
 This component allows sending and receiving messages from Redis. Redis is advanced key-value store where keys can contain strings, hashes, lists, sets and sorted sets. In addition it provides pub/sub functionality for inter-app communications.
Camel provides a producer for executing commands, consumer for subscribing to pub/sub messages an idempotent repository for filtering out duplicate messages.
 INFO:*Prerequisites* In order to use this component, you must have a Redis server running.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-security/</guid>
      <description>Spring Security Available as of Camel 2.3
 The camel-spring-security component provides role-based authorization for Camel routes. It leverages the authentication and user services provided by Spring Security (formerly Acegi Security) and adds a declarative, role-based policy system to control whether a route can be executed by a given principal.
 If you are not familiar with the Spring Security authentication and authorization system, please review the current reference documentation on the SpringSource web site linked above.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring-ws-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring-ws-component/</guid>
      <description>Spring WebService Component Available as of Camel version 2.6
 The spring-ws: component allows you to integrate with Spring Web Services. It offers both client-side support, for accessing web services, and server-side support for creating your own contract-first web services.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-spring-ws&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   INFO:*Dependencies* As of Camel 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/spring/</guid>
      <description>Spring Support Apache Camel is designed to work nicely with the Spring Framework in a number of ways.
   Camel uses Spring Transactions as the default transaction handling in components like JMS and JPA
  Camel works with Spring 2 XML processing with the Xml Configuration
  Camel Spring XML Schema&amp;#8217;s is defined at Xml Reference
  Camel supports a powerful version of Spring Remoting which can use powerful routing between the client and server side along with using all of the available Components for the transport</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sql-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sql-component/</guid>
      <description>SQL Component Available as of Camel version 1.4
 The sql: component allows you to work with databases using JDBC queries. The difference between this component and JDBC component is that in case of SQL the query is a property of the endpoint and it uses message payload as parameters passed to the query.
 This component uses spring-jdbc behind the scenes for the actual SQL handling.
 Maven users will need to add the following dependency to their pom.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sql-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sql-language/</guid>
      <description>SQL Language (deprecated) Available as of Camel version 1.0
 The SQL support is added by JoSQL and is primarily used for performing SQL queries on in-memory objects. If you prefer to perform actual database queries then check out the JPA component.
 Looking for the SQL component
 Camel has both a SQL language and a SQL Component. This page is about the SQL language. Click on SQL Component if you are looking for the component instead.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/sql-stored-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/sql-stored-component/</guid>
      <description>SQL Stored Procedure Component Available as of Camel version 2.17
 The sql-stored: component allows you to work with databases using JDBC Stored Procedure queries. This component is an extension to the SQL Component but specialized for calling stored procedures.
 This component uses spring-jdbc behind the scenes for the actual SQL handling.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/ssh-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/ssh-component/</guid>
      <description>SSH Component Available as of Camel version 2.10
 The SSH component enables access to SSH servers such that you can send an SSH command, and process the response.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-ssh&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format ssh:[username[:password]@]host[:port][?options]    Options The SSH component supports 12 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/stax-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/stax-component/</guid>
      <description>StAX Component Available as of Camel version 2.9
 The StAX component allows messages to be process through a SAX ContentHandler.
Another feature of this component is to allow to iterate over JAXB records using StAX, for example using the Splitter EIP.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-stax&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format stax:content-handler-class   example:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/stomp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/stomp-component/</guid>
      <description>Stomp Component Available as of Camel version 2.12
 The stomp: component is used for communicating with Stomp compliant message brokers, like Apache ActiveMQ or ActiveMQ Apollo
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-stomp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format stomp:queue:destination[?options]   Where destination is the name of the queue.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/stream-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/stream-component/</guid>
      <description>Stream Component Available as of Camel version 1.3
 The stream: component provides access to the System.in, System.out and System.err streams as well as allowing streaming of file and URL.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-stream&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format stream:in[?options] stream:out[?options] stream:err[?options] stream:header[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/string-template-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/string-template-component/</guid>
      <description>String Template Component Available as of Camel version 1.2
 The string-template: component allows you to process a message using a String Template. This can be ideal when using Templating to generate responses for requests.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-stringtemplate&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format string-template:templateName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/swagger-java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/swagger-java/</guid>
      <description>Swagger Java Component Available as of Camel 2.16
 The Rest DSL can be integrated with the camel-swagger-java module which is used for exposing the REST services and their APIs using Swagger.
 Maven users will need to add the following dependency to their pom.xml for this component:
 From Camel 2.16 onwards the swagger component is purely Java based, and its
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-swagger-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   The camel-swagger-java module can be used as a Servlet or directly from the REST components (without the need for servlet)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/swagger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/swagger/</guid>
      <description>Swagger Scala Component (deprecated) Available as of Camel 2.14
 The Rest DSL can be integrated with the camel-swagger module which is used for exposing the REST services and their APIs using Swagger.
 Maven users will need to add the following dependency to their pom.xml for this component:
 WARNING:This component is deprecated. From Camel 2.16 onwards use the new Java based swagger module Swagger Java
 The Scala based camel-swagger module is deprecated, and to be removed in a future release.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/syslog-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/syslog-dataformat/</guid>
      <description>Syslog DataFormat Available as of Camel version 2.6
 The syslog dataformat is used for working with RFC3164 and RFC5424 messages.
 This component supports the following:
   UDP consumption of syslog messages
  Agnostic data format using either plain String objects or SyslogMessage model objects.
  Type Converter from/to SyslogMessage and String
  Integration with the camel-mina component.
  Integration with the camel-netty component.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/tarfile-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/tarfile-dataformat/</guid>
      <description>Tar File DataFormat Available as of Camel version 2.16
 The Tar File Data Format is a message compression and de-compression format. Messages can be marshalled (compressed) to Tar Files containing a single entry, and Tar Files containing a single entry can be unmarshalled (decompressed) to the original file contents.
 There is also a aggregation strategy that can aggregate multiple messages into a single Tar File.
 TarFile Options The Tar File dataformat supports 3 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/telegram-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/telegram-component/</guid>
      <description>Telegram Component Available as of Camel version 2.18
 The Telegram component provides access to the Telegram Bot API. It allows a Camel-based application to send and receive messages by acting as a Bot, participating in direct conversations with normal users, private and public groups or channels.
 A Telegram Bot must be created before using this component, following the instructions at the Telegram Bot developers home. When a new Bot is created, the BotFather provides an authorization token corresponding to the Bot.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/terser-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/terser-language/</guid>
      <description>HL7 Terser Language Terser language Available as of Camel version 2.11.0
 HAPI provides a Terser class that provides access to fields using a commonly used terse location specification syntax. The Terser language allows to use this syntax to extract values from messages and to use them as expressions and predicates for filtering, content-based routing etc.
 Sample:
 import static org.apache.camel.component.hl7.HL7.terser; ... // extract patient ID from field QRD-8 in the QRY_A19 message above and put into message header from(&#34;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/test-blueprint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/test-blueprint/</guid>
      <description>Blueprint Testing Available as of Camel 2.10
 camel-test-blueprint does only support testing one CamelContext. So if you have two or more CamelContexts in your blueprint XML files, then only the CamelContext first found is used during testing.
 Testing is a crucial part of any development or integration work. Camel supports the definition of Blueprint routes, but given that Blueprint is an OSGi specific technology, writing unit tests is quite difficult.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/test-cdi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/test-cdi/</guid>
      <description>CDI Testing Testing is a crucial part of any development or integration work. In case you&amp;#8217;re using the Camel CDI integration for your applications, you have a number of options to ease testing.
 You can use CDI for IoC and the Camel testing endpoints like DataSet, Mock, Test and testing API like AdviceWith and NotifyBuilder to create sophisticated integration/unit tests that are easy to run and debug inside your IDE.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/test-karaf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/test-karaf/</guid>
      <description>Test Karaf Available since Camel 2.18
 Camel testing using Apache Karaf with Pax-Exam.
 This component allows to perform integration testing by running Karaf containers using Pax-Exam.
 The component is in development and needs some more polish to be ready. In addition there is also need for documentation.
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/test-spring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/test-spring/</guid>
      <description>Test Spring Available since 2.10
 Allows to test Camel with Spring applications such as Spring XML files or Spring-Boot.
   Important  This documentation is old and needs to be updated
     Testing is a crucial part of any development or integration work. The Spring Framework offers a number of features that makes it easy to test while using Spring for Inversion of Control which works with JUnit 3.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/test/</guid>
      <description>Test Component Testing of distributed and asynchronous processing is notoriously difficult. The Mock, Test and DataSet endpoints work great with the Camel Testing Framework to simplify your unit and integration testing using Enterprise Integration Patterns and Camel&amp;#8217;s large range of Components together with the powerful Bean Integration.
 The test component extends the Mock component to support pulling messages from another endpoint on startup to set the expected message bodies on the underlying Mock endpoint.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/testng/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/testng/</guid>
      <description>TestNG (deprecated) Available since Camel 2.8
 Camel testing using TestNG.
 This component has been deprecated and we recommend using camel-test instead which is using JUnit.
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/thrift-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/thrift-component/</guid>
      <description>Thrift Component Available as of Camel version 2.20
 The Thrift component allows you to call or expose Remote Procedure Call (RPC) services using Apache Thrift binary communication protocol and serialization mechanism.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-thrift&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format thrift://service[?options]    Endpoint Options The Thrift component has no options.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/thrift-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/thrift-dataformat/</guid>
      <description>Thrift DataFormat Available as of Camel version 2.20
 Camel provides a Data Format to serialize between Java and the Apache Thrift . The project&amp;#8217;s site details why you may wish to https://thrift.apache.org/. Apache Thrift is language-neutral and platform-neutral, so messages produced by your Camel routes may be consumed by other language implementations.
 Apache Thrift Implementation
 Thrift Options The Thrift dataformat supports 3 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/tidymarkup-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/tidymarkup-dataformat/</guid>
      <description>TidyMarkup DataFormat Available as of Camel version 2.0
 TidyMarkup is a Data Format that uses the TagSoup to tidy up HTML. It can be used to parse ugly HTML and return it as pretty wellformed HTML.
 Camel eats our own -dog food- soap
 We had some issues in our pdf Manual where we had some strange symbols. So Jonathan used this data format to tidy up the wiki html pages that are used as base for rendering the pdf manuals.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/tika-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/tika-component/</guid>
      <description>Tika Component Available as of Camel version 2.19
 The Tika: components provides the ability to detect and parse documents with Apache Tika. This component uses Apache Tika as underlying library to work with documents.
 In order to use the Tika component, Maven users will need to add the following dependency to their pom.xml:
 pom.xml
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-tika&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format The TIKA component only supports producer endpoints.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/twilio-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/twilio-component/</guid>
      <description>Twilio Component Available as of Camel version 2.20
 The Twilio component provides access to Version 2010-04-01 of Twilio REST APIs accessible using Twilio Java SDK.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-twilio&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   Twilio Options The Twilio component supports 3 options which are listed below.
     Name Description Default Type     configuration (advanced)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/twitter-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/twitter-component/</guid>
      <description>Twitter Component (deprecated) Available as of Camel version 2.10
   Important  The composite twitter component has been deprecated. Use individual component for directmessage, search, streaming and timeline.
   Twitter Components
  Twitter Direct Message
  Twitter Search
  Twitter Streaming
  Twitter Timeline
          The Twitter component enables the most useful features of the Twitter API by encapsulating Twitter4J.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/twitter-directmessage-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/twitter-directmessage-component/</guid>
      <description>Twitter Direct Message Component Available as of Camel version 2.10
 The Twitter Direct Message Component consumes/produces a user&amp;#8217;s direct messages.
 Component Options The Twitter Direct Message component supports 9 options which are listed below.
     Name Description Default Type     accessToken (security)
 The access token
  String
   accessTokenSecret (security)
 The access token secret
  String</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/twitter-search-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/twitter-search-component/</guid>
      <description>Twitter Search Component Available as of Camel version 2.10
 The Twitter Search component consumes search results.
 Component Options The Twitter Search component supports 9 options which are listed below.
     Name Description Default Type     accessToken (security)
 The access token
  String
   accessTokenSecret (security)
 The access token secret
  String
   consumerKey (security)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/twitter-streaming-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/twitter-streaming-component/</guid>
      <description>Twitter Streaming Component Available as of Camel version 2.10
 The Twitter Streaming component consumes twitter statuses using Streaming API.
 Component Options The Twitter Streaming component supports 9 options which are listed below.
     Name Description Default Type     accessToken (security)
 The access token
  String
   accessTokenSecret (security)
 The access token secret
  String
   consumerKey (security)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/twitter-timeline-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/twitter-timeline-component/</guid>
      <description>Twitter Timeline Component Available as of Camel version 2.10
 The Twitter Timeline component consumes twitter timeline or update the status of specific user.
 Component Options The Twitter Timeline component supports 9 options which are listed below.
     Name Description Default Type     accessToken (security)
 The access token
  String
   accessTokenSecret (security)
 The access token secret</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/twitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/twitter/</guid>
      <description>Twitter Components Available as of Camel version 2.10
 The camel-twitter consists of 4 components:
   Twitter Direct Message
  Twitter Search
  Twitter Streaming
  Twitter Timeline
   The Twitter components enable the most useful features of the Twitter API by encapsulating Twitter4J. It allows direct, polling, or event-driven consumption of timelines, users, trends, and direct messages. Also, it supports producing messages as status updates or direct messages.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/undertow-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/undertow-component/</guid>
      <description>Undertow Component Available as of Camel version 2.16
 The undertow component provides HTTP-based endpoints for consuming and producing HTTP requests. That is, the Undertow component behaves as a simple Web server.
Undertow can also be used as a http client which mean you can also use it with Camel as a producer.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/univocity-csv-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/univocity-csv-dataformat/</guid>
      <description>uniVocity CSV DataFormat Available as of Camel version 2.15
 This Data Format uses http://www.univocity.com/pages/about-parsers[uniVocity-parsers] for reading and writing 3 kinds of tabular data text files:
   CSV (Comma Separated Values), where the values are separated by a symbol (usually a comma)
  fixed-width, where the values have known sizes
  TSV (Tabular Separated Values), where the fields are separated by a tabulation
   Thus there are 3 data formats based on uniVocity-parsers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/univocity-fixed-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/univocity-fixed-dataformat/</guid>
      <description>uniVocity Fixed Length DataFormat Available as of Camel version 2.15
 This Data Format uses http://www.univocity.com/pages/about-parsers[uniVocity-parsers] for reading and writing 3 kinds of tabular data text files:
   CSV (Comma Separated Values), where the values are separated by a symbol (usually a comma)
  fixed-width, where the values have known sizes
  TSV (Tabular Separated Values), where the fields are separated by a tabulation
   Thus there are 3 data formats based on uniVocity-parsers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/univocity-tsv-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/univocity-tsv-dataformat/</guid>
      <description>uniVocity TSV DataFormat Available as of Camel version 2.15
 This Data Format uses http://www.univocity.com/pages/about-parsers[uniVocity-parsers] for reading and writing 3 kinds of tabular data text files:
   CSV (Comma Separated Values), where the values are separated by a symbol (usually a comma)
  fixed-width, where the values have known sizes
  TSV (Tabular Separated Values), where the fields are separated by a tabulation
   Thus there are 3 data formats based on uniVocity-parsers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/urlrewrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/urlrewrite/</guid>
      <description>UrlRewrite Component Available as of Camel 2.11
 The camel-urlrewrite component allows to plugin url rewrite functionality to HTTP, HTTP4, Jetty, or AHC components. This component integrates the UrlRewriteFilter project with Apache Camel. This allows you to use the capabilities from the url rewrite project with your Camel routes.
 This component requires that your Camel routes starts from a servlet based endpoint such as Jetty or SERVLET.
 Options The camel-urlrewrite component offers the following options</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/velocity-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/velocity-component/</guid>
      <description>Velocity Component Available as of Camel version 1.2
 The velocity: component allows you to process a message using an Apache Velocity template. This can be ideal when using Templating to generate responses for requests.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-velocity&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format velocity:templateName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/vertx-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/vertx-component/</guid>
      <description>Vert.x Component Available as of Camel version 2.12
 The vertx component is for working with the Vertx EventBus.
 The vertx EventBus sends and receives JSON events.
 INFO:From Camel 2.16 onwards vertx 3 is in use which requires Java 1.8 at runtime.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-vertx&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format vertx:channelName[?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/weather-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/weather-component/</guid>
      <description>Weather Component Available as of Camel version 2.12
 The weather: component is used for polling weather information from Open Weather Map - a site that provides free global weather and forecast information. The information is returned as a json String object.
 Camel will poll for updates to the current weather and forecasts once per hour by default. It can also be used to query the weather api based on the parameters defined on the endpoint which is used as producer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/websocket-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/websocket-component/</guid>
      <description>Jetty Websocket Component Available as of Camel version 2.10
 The websocket component provides websocket endpoints for communicating with clients using websocket. The component uses Eclipse Jetty Server which implements the IETF specification (drafts and RFC 6455). It supports the protocols ws:// and wss://. To use wss:// protocol, the SSLContextParameters must be defined.
 Version currently supported
 Camel 2.18 uses Jetty 9
 URI format websocket://hostname[:port][/resourceUri][?options]   You can append query options to the URI in the following format, ?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xmlbeans-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xmlbeans-dataformat/</guid>
      <description>XML Beans DataFormat Available as of Camel version 1.2
 XmlBeans is a Data Format which uses the XmlBeans library to unmarshal an XML payload into Java objects or to marshal Java objects into an XML payload.
 from(&#34;activemq:My.Queue&#34;). unmarshal().xmlBeans(). to(&#34;mqseries:Another.Queue&#34;);   Options The XML Beans dataformat supports 2 options which are listed below.
     Name Default Java Type Description     prettyPrint</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xmljson-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xmljson-dataformat/</guid>
      <description>XML JSon DataFormat Available as of Camel version 2.10
 Camel already supports a number of data formats to perform XML and JSON-related conversions, but all of them require a POJO either as an input (for marshalling) or produce a POJO as output (for unmarshalling). This data format provides the capability to convert from XML to JSON and vice-versa directly, without stepping through intermediate POJOs.
 This data format leverages the Json-lib library to achieve direct conversion.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xmlrpc-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xmlrpc-component/</guid>
      <description>XML RPC Component Available as of Camel version 2.11
 This component provides a dataformat for xml, which allows serialization and deserialization of request messages and response message using Apache XmlRpc&amp;#8217;s binary dataformat. You can also invoke the XMLRPC Service through the camel-xmlrpc producer.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-xmlrpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   XmlRpc Overview It&amp;#8217;s a spec and a set of implementations that allow software running on disparate operating systems, running in different environments to make procedure calls over the Internet.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xmlrpc-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xmlrpc-dataformat/</guid>
      <description>XML RPC DataFormat Available as of Camel version 2.11
 As the XmlRpc message could be request or response, when you use the XmlRpcDataFormat, you need to specify the dataformat is for request or not.
 &amp;lt;camelContext id=&#34;camel&#34; xmlns=&#34;http://camel.apache.org/schema/spring&#34;&amp;gt; &amp;lt;!-- we define the xml rpc data formats to be used --&amp;gt; &amp;lt;dataFormats&amp;gt; &amp;lt;xmlrpc id=&#34;xmlrpcRequest&#34; request=&#34;true&#34;/&amp;gt; &amp;lt;xmlrpc id=&#34;xmlrpcResponse&#34; request=&#34;false&#34;/&amp;gt; &amp;lt;/dataFormats&amp;gt; &amp;lt;route&amp;gt; &amp;lt;from uri=&#34;direct:request&#34;/&amp;gt; &amp;lt;marshal ref=&#34;xmlrpcRequest&#34;/&amp;gt; &amp;lt;unmarshal&amp;gt; &amp;lt;xmlrpc request=&#34;true&#34;/&amp;gt; &amp;lt;/unmarshal&amp;gt; &amp;lt;to uri=&#34;mock:request&#34; /&amp;gt; &amp;lt;/route&amp;gt; &amp;lt;route&amp;gt; &amp;lt;from uri=&#34;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xmlsecurity-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xmlsecurity-component/</guid>
      <description>XML Security Component Available as of Camel version 2.12
 With this Apache Camel component, you can generate and validate XML signatures as described in the W3C standard XML Signature Syntax and Processing or as described in the successor version 1.1. For XML Encryption support, please refer to the XML Security Data Format.
 You can find an introduction to XML signature here. The implementation of the component is based on JSR 105, the Java API corresponding to the W3C standard and supports the Apache Santuario and the JDK provider for JSR 105.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xmpp-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xmpp-component/</guid>
      <description>XMPP Component Available as of Camel version 1.0
 The xmpp: component implements an XMPP (Jabber) transport.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-xmpp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;!-- use the same version as your Camel core version --&amp;gt; &amp;lt;/dependency&amp;gt;   URI format xmpp://[login@]hostname[:port][/participant][?Options]   The component supports both room based and private person-person conversations.
The component supports both producer and consumer (you can get messages from XMPP or send messages to XMPP).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xquery-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xquery-component/</guid>
      <description>XQuery Component Available as of Camel version 1.0
 Camel supports XQuery to allow an Expression or Predicate to be used in the DSL or Xml Configuration. For example you could use XQuery to create an Predicate in a Message Filter or as an Expression for a Recipient List.
 Options The XQuery component supports 4 options which are listed below.
     Name Description Default Type     moduleURIResolver (advanced)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xquery-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xquery-language/</guid>
      <description>XQuery Language Available as of Camel version 1.0
 Camel supports XQuery to allow an Expression or Predicate to be used in the DSL or Xml Configuration. For example you could use XQuery to create an Predicate in a Message Filter or as an Expression for a Recipient List.
 XQuery Language options The XQuery language supports 3 options which are listed below.
     Name Default Java Type Description     type</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/xstream-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/xstream-dataformat/</guid>
      <description>XStream DataFormat Available as of Camel version 1.3
 XStream is a Data Format which uses the XStream library to marshal and unmarshal Java objects to and from XML.
 To use XStream in your camel routes you need to add the a dependency on camel-xstream which implements this data format.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-xstream&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/yaml-snakeyaml-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/yaml-snakeyaml-dataformat/</guid>
      <description>YAML SnakeYAML DataFormat Available as of Camel version 2.17
 YAML is a Data Format to marshal and unmarshal Java objects to and from http://www.yaml.org/[YAML].
 For YAML to object marshalling, Camel provides integration with three popular YAML libraries:
   The http://www.snakeyaml.org/[SnakeYAML] library
   Every library requires adding the special camel component (see &#34;Dependency&amp;#8230;&amp;#8203;&#34; paragraphs further down). By default Camel uses the SnakeYAML library.
 YAML Options The YAML SnakeYAML dataformat supports 11 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/yammer-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/yammer-component/</guid>
      <description>Yammer Component Available as of Camel version 2.12
 The Yammer component allows you to interact with the Yammer enterprise social network. Consuming messages, users, and user relationships is supported as well as creating new messages.
 Yammer uses OAuth 2 for all client application authentication. In order to use camel-yammer with your account, you&amp;#8217;ll need to create a new application within Yammer and grant the application access to your account.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/zendesk-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/zendesk-component/</guid>
      <description>Zendesk Component Available as of Camel version 2.19
 The Zendesk component provides access to all of the zendesk.com APIs accessible using zendesk-java-client. It allows producing messages to manage Zendesk ticket, user, organization, etc.
 Maven users will need to add the following dependency to their pom.xml for this component:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;camel-zendesk&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${camel-version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   Zendesk Options The Zendesk component supports 3 options which are listed below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/zipfile-dataformat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/zipfile-dataformat/</guid>
      <description>Zip File DataFormat Available as of Camel version 2.11
 The Zip File Data Format is a message compression and de-compression format. Messages can be marshalled (compressed) to Zip files containing a single entry, and Zip files containing a single entry can be unmarshalled (decompressed) to the original file contents. This data format supports ZIP64, as long as Java 7 or later is being used.
 Since Camel 2.12.3 there is also a aggregation strategy that can aggregate multiple messages into a single Zip file.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/zipkin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/zipkin/</guid>
      <description>Zipkin Component Available as of Camel 2.18
 The camel-zipkin component is used for tracing and timing incoming and outgoing Camel messages using zipkin.
 Events (span) are captured for incoming and outgoing messages being sent to/from Camel.
 This means you need to configure which Camel endpoints map to zipkin service names.
 The mapping can be configured using:
   route id - A Camel route id</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/zookeeper-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/zookeeper-component/</guid>
      <description>ZooKeeper Component Available as of Camel version 2.9
 The ZooKeeper component allows interaction with a ZooKeeper cluster and exposes the following features to Camel:
  Creation of nodes in any of the ZooKeeper create modes.
  Get and Set the data contents of arbitrary cluster nodes (data being set must be convertible to byte[]).
  Create and retrieve the list the child nodes attached to a particular node.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://camel.apache.org/components/2.20.0/zookeeper-master-component/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://camel.apache.org/components/2.20.0/zookeeper-master-component/</guid>
      <description>ZooKeeper Master Component Available as of Camel version 2.19
 The zookeeper-master: endpoint provides a way to ensure only a single consumer in a cluster consumes from a given endpoint; with automatic failover if that JVM dies.
 This can be very useful if you need to consume from some legacy back end which either doesn&amp;#8217;t support concurrent consumption or due to commercial or stability reasons you can only have a single connection at any point in time.</description>
    </item>
    
  </channel>
</rss>